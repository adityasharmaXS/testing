## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

replicaCount: 1

image:
  registry: docker.io
  repository: centrifugo/centrifugo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

service:
  ## Service type
  ##
  type: ClusterIP
  ## Service port
  ##
  port: 8000
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePort: ""
  ## Provide any additional annotations which may be required
  ##
  annotations: {}
  ##
  ## Use separate service for internal endpoints. It could be useful for configuring same port number for all services.
  useSeparateInternalService: false
  ## Use separate service for GRPC API endpoints. It could be useful for configuring same port number for all services.
  useSeparateGrpcService: false
  ## Use separate service for GRPC unidirectional stream. It could be useful for configuring same port number for all services.
  useSeparateUniGrpcService: false

internalService:
  port: 9000
  type: ClusterIP
  nodePort: ""
  # Static NodePort, if set.
  # nodePort: 30101
  annotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/path: "/metrics"
    # prometheus.io/port: "9000"

grpcService:
  port: 10000
  type: ClusterIP
  nodePort: ""
  # Static NodePort, if set.
  # nodePort: 30102
  annotations: {}

uniGrpcService:
  port: 11000
  type: ClusterIP
  nodePort: ""
  # Static NodePort, if set.
  # nodePort: 30103
  annotations: {}

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    #
    # To run on custom path:
    # nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    - host: centrifugo.thedataworks.com
      paths:
        - /
    # - host: centrifugo-with-prefix.local
    #   paths:
    #     - /test(/|$)(.*)
  # https://kubernetes.github.io/ingress-nginx/examples/tls-termination/
  tls:
    - secretName: wildcard-ingress-tls
      hosts:
        - centrifugo.thedataworks.com

resources:
  requests:
    memory: "64Mi"
    cpu: "50m"
  limits:
    memory: "1024Mi"
    cpu: "1000m"

serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Annotations to add to the service account.
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

terminationGracePeriodSeconds: 30

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  #
  # You can also tune sysctl, ex.:
  # sysctls:
  #   - name: net.core.somaxconn
  #     value: "2048"

deploymentStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    ## Specify the namespace in which the serviceMonitor resource will be created
    ##
    # namespace: ""
    ## Specify the interval at which metrics should be scraped
    ##
    interval: 30s
    ## Specify the timeout after which the scrape is ended
    ##
    # scrapeTimeout: 30s
    ## Specify Metric Relabellings to add to the scrape endpoint
    ##
    # relabellings:
    ## Specify honorLabels parameter to add the scrape endpoint
    ##
    honorLabels: false
    ## Specify the release for ServiceMonitor. Sometimes it should be custom for prometheus operator to work
    ##
    # release: ""
    ## Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    ##
    additionalLabels: {}


nodeSelector: {}

tolerations: []

affinity: {}

# Additional environment variables to be passed to Centrifugo container.
env: {}

# Centrifugo configuration, will be transformed into config.json file.
config:
  # Engine to use. Default memory engine allows running only one Centrifugo pod.
  # Scale to many pods with Redis engine or Nats broker. Refer to Centrifugo
  # documentation: https://centrifugal.github.io/centrifugo/server/engines/
  engine: "redis"

  # Enable admin web interface by default.
  admin: true

  # Array of namespaces.
  namespaces:
    - name: "public"
      publish: true
      anonymous: true
      history_size: 10
      history_ttl: "300s"
      recover: true
    - name: "chat"
      publish: true 
      anonymous: true 
      history_size: 10
      history_ttl: "300s" 
      recover: true
    - name: "gossips"
      presence: true
      join_leave: true
  
  anonymous: true

  allowed_origins:
    - "*"

  publish: true

  presence: true
  
  proxy_publish: true

  history_size: 10

  history_ttl: "30s"
  
  join_leave: true

  redis_streams: true

  proxy_publish_endpoint: "http://centri-proxy:3003/centrifugo/publish"
  
  proxy_publish_timeout: "5s"

  proxy_http_headers:
    - "websocket"
    - "Origin"
    - "User-Agent"
    - "Cookie"
    - "Authorization"
    - "X-Real-Ip"
    - "X-Forwarded-For"
    - "X-Request-Id"
# existingSecret: my-secret

# Centrifugo secrets.
secrets:
  # Secret key for HMAC tokens.
  tokenHmacSecretKey: ""

  # Admin password used to protect access to web interface.
  adminPassword: "Q2VudHJpZnVnZURhdGF3b3Jrcwo"

  # Admin secret used to create auth tokens on user login into admin web interface.
  adminSecret: ""

  # Centrifugo api_key for Centrifugo API endpoint authorization.
  apiKey: ""

  # Centrifugo grpc_api_key for Centrifugo GRPC API authorization.
  grpcApiKey: ""

  # Connection string to Redis.
  redisAddress: "redis://redis-master.dataworks-app.svc:6379"

  # Password for Redis.
  redisPassword: ""

  # Password for Redis Sentinel.
  redisSentinelPassword: ""

  # Connection string to Nats.
  natsUrl: ""

  # Centrifugo PRO license.
  license: ""
