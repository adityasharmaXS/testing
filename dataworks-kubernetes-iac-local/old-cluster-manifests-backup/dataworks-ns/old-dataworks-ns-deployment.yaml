apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"captcha-solver","tier":"dataworks"},"name":"captcha-solver","namespace":"dataworks"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"captcha-solver","tier":"dataworks"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":0},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"captcha-solver","tier":"dataworks"}},"spec":{"containers":[{"image":"dwproductionus.azurecr.io/captcha_solver:1.0.0","imagePullPolicy":"Always","name":"captcha-solver","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T09:34:30Z"
    generation: 2
    labels:
      app: captcha-solver
      tier: dataworks
    name: captcha-solver
    namespace: dataworks
    resourceVersion: "64620315"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/captcha-solver
    uid: 32e76045-2063-4abe-aa6f-ad2b04c86e48
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: captcha-solver
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: captcha-solver
          tier: dataworks
      spec:
        containers:
        - image: dwproductionus.azurecr.io/captcha_solver:1.0.1
          imagePullPolicy: Always
          name: captcha-solver
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-08-26T12:33:35Z"
      lastUpdateTime: "2020-08-26T12:34:23Z"
      message: ReplicaSet "captcha-solver-54d84f4656" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-21T20:21:45Z"
      lastUpdateTime: "2021-04-21T20:21:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "225"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"configdatamanagementservice","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"configdatamanagementservice"}},"template":{"metadata":{"labels":{"app":"configdatamanagementservice"}},"spec":{"containers":[{"env":[{"name":"REDIS_HOST","valueFrom":{"secretKeyRef":{"key":"redis_host","name":"configdatamanagement-secret"}}},{"name":"REDIS_PORT","valueFrom":{"secretKeyRef":{"key":"redis_port","name":"configdatamanagement-secret"}}},{"name":"JWT","valueFrom":{"secretKeyRef":{"key":"jwt","name":"configdatamanagement-secret"}}},{"name":"SESSION_KEY","valueFrom":{"secretKeyRef":{"key":"session_key","name":"configdatamanagement-secret"}}},{"name":"PORT","value":"3001"},{"name":"GRPCPORT","value":"53001"},{"name":"POSTGRES_USER","valueFrom":{"secretKeyRef":{"key":"postgres_user","name":"configdatamanagement-secret"}}},{"name":"POSTGRES_PASSWORD","valueFrom":{"secretKeyRef":{"key":"postgres_password","name":"configdatamanagement-secret"}}},{"name":"POSTGRES_HOST","valueFrom":{"secretKeyRef":{"key":"postgres_host","name":"configdatamanagement-secret"}}},{"name":"POSTGRES_DB","valueFrom":{"secretKeyRef":{"key":"postgres_db","name":"configdatamanagement-secret"}}},{"name":"POSTGRES_DB_TEST","valueFrom":{"secretKeyRef":{"key":"postgres_db_test","name":"configdatamanagement-secret"}}},{"name":"POSTGRES_PORT","valueFrom":{"secretKeyRef":{"key":"postgres_port","name":"configdatamanagement-secret"}}},{"name":"MONGO_HOST","valueFrom":{"secretKeyRef":{"key":"mongo_host","name":"configdatamanagement-secret"}}},{"name":"MONGO_PORT","valueFrom":{"secretKeyRef":{"key":"mongo_port","name":"configdatamanagement-secret"}}},{"name":"MONGO_DB","valueFrom":{"secretKeyRef":{"key":"mongo_db","name":"configdatamanagement-secret"}}},{"name":"MONGO_DB_TEST","valueFrom":{"secretKeyRef":{"key":"mongo_db_test","name":"configdatamanagement-secret"}}},{"name":"AZURE_STORAGE_ACCOUNT","valueFrom":{"secretKeyRef":{"key":"azure_storage_account","name":"configdatamanagement-secret"}}},{"name":"AZURE_STORAGE_ACCESS_KEY","valueFrom":{"secretKeyRef":{"key":"azure_storage_access_key","name":"configdatamanagement-secret"}}},{"name":"PUBLIC_STORAGE","value":"/data/public-files"},{"name":"PRIVATE_STORAGE","value":"/data/private-files"},{"name":"TAXONOMIES_STORAGE","value":"/data/files"},{"name":"CSV_STORAGE","value":"/data/csv"}],"image":"dwproductionus.azurecr.io/configdatamanagementservice","name":"configdatamanagementservice","ports":[{"containerPort":53001,"protocol":"TCP"},{"containerPort":3003,"name":"datamanagement","protocol":"TCP"}],"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"data"}]}],"imagePullSecrets":[{"name":"dwproductionus9082ae7e-auth"}],"volumes":[{"azureFile":{"secretName":"dwk8sdatastorage-secret","shareName":"data"},"name":"data"}]}}}}
    creationTimestamp: "2020-08-19T09:46:22Z"
    generation: 231
    name: configdatamanagementservice
    namespace: dataworks
    resourceVersion: "83807802"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/configdatamanagementservice
    uid: 1ac4ea11-e947-4bb9-8e24-6ad1577ddbe8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: configdatamanagementservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: configdatamanagementservice
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                key: redis_host
                name: configdatamanagement-secret
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                key: redis_port
                name: configdatamanagement-secret
          - name: JWT
            valueFrom:
              secretKeyRef:
                key: jwt
                name: configdatamanagement-secret
          - name: SESSION_KEY
            valueFrom:
              secretKeyRef:
                key: session_key
                name: configdatamanagement-secret
          - name: PORT
            value: "3001"
          - name: GRPCPORT
            value: "53001"
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgres_user
                name: configdatamanagement-secret
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres_password
                name: configdatamanagement-secret
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                key: postgres_host
                name: configdatamanagement-secret
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: postgres_db
                name: configdatamanagement-secret
          - name: POSTGRES_DB_TEST
            valueFrom:
              secretKeyRef:
                key: postgres_db_test
                name: configdatamanagement-secret
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                key: postgres_port
                name: configdatamanagement-secret
          - name: MONGO_HOST
            valueFrom:
              secretKeyRef:
                key: mongo_host
                name: configdatamanagement-secret
          - name: MONGO_PORT
            valueFrom:
              secretKeyRef:
                key: mongo_port
                name: configdatamanagement-secret
          - name: MONGO_DB
            valueFrom:
              secretKeyRef:
                key: mongo_db
                name: configdatamanagement-secret
          - name: MONGO_DB_TEST
            valueFrom:
              secretKeyRef:
                key: mongo_db_test
                name: configdatamanagement-secret
          - name: AZURE_STORAGE_ACCOUNT
            valueFrom:
              secretKeyRef:
                key: azure_storage_account
                name: configdatamanagement-secret
          - name: AZURE_STORAGE_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: azure_storage_access_key
                name: configdatamanagement-secret
          - name: PUBLIC_STORAGE
            value: /data/public-files
          - name: PRIVATE_STORAGE
            value: /data/private-files
          - name: TAXONOMIES_STORAGE
            value: /data/files
          - name: CSV_STORAGE
            value: /data/csv
          image: dwproductionus.azurecr.io/config-data-management-service:298
          imagePullPolicy: Always
          name: configdatamanagementservice
          ports:
          - containerPort: 53001
            protocol: TCP
          - containerPort: 3003
            name: datamanagement
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dwproductionus9082ae7e-auth
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - azureFile:
            secretName: dwk8sdatastorage-secret
            shareName: data
          name: data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-17T15:41:30Z"
      lastUpdateTime: "2021-06-17T15:41:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-03-15T21:00:11Z"
      lastUpdateTime: "2021-06-17T15:55:38Z"
      message: ReplicaSet "configdatamanagementservice-7bc8788f4" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 231
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "54"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"dashboardui","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"dashboardui"}},"template":{"metadata":{"labels":{"app":"dashboardui"}},"spec":{"containers":[{"image":"dwproductionus.azurecr.io/dashboardui","name":"dashboardui","ports":[{"containerPort":3000,"name":"dashboardui"}]}],"imagePullSecrets":[{"name":"dwproductionus9082ae7e-auth"}]}}}}
    creationTimestamp: "2021-04-02T14:24:47Z"
    generation: 54
    name: dashboardui
    namespace: dataworks
    resourceVersion: "83417798"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/dashboardui
    uid: bf5abe33-2c7c-47bf-ba79-198d5cca7264
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: dashboardui
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: dashboardui
      spec:
        containers:
        - image: dwproductionus.azurecr.io/dashboard-ui:294
          imagePullPolicy: Always
          name: dashboardui
          ports:
          - containerPort: 3000
            name: dashboardui
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dwproductionus9082ae7e-auth
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-21T20:22:08Z"
      lastUpdateTime: "2021-04-21T20:22:08Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-04-02T14:24:47Z"
      lastUpdateTime: "2021-06-16T12:32:36Z"
      message: ReplicaSet "dashboardui-fb7fbc89b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 54
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"forward-proxy"},"name":"forward-proxy","namespace":"dataworks"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"forward-proxy"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"forward-proxy"}},"spec":{"containers":[{"image":"dwproductionus.azurecr.io/forward-proxy:1.0.4","imagePullPolicy":"IfNotPresent","name":"forward-proxy","ports":[{"containerPort":8100,"name":"port8100","protocol":"TCP"},{"containerPort":8101,"name":"port8101","protocol":"TCP"},{"containerPort":8102,"name":"port8102","protocol":"TCP"},{"containerPort":8103,"name":"port8103","protocol":"TCP"},{"containerPort":8104,"name":"port8104","protocol":"TCP"},{"containerPort":8105,"name":"port8105","protocol":"TCP"},{"containerPort":8106,"name":"port8106","protocol":"TCP"}],"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T09:54:02Z"
    generation: 2
    labels:
      app: forward-proxy
    name: forward-proxy
    namespace: dataworks
    resourceVersion: "45450051"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/forward-proxy
    uid: 3e2411f6-9578-4635-ac44-20e5b77b91f0
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: forward-proxy
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: forward-proxy
      spec:
        containers:
        - image: dwproductionus.azurecr.io/forward-proxy:1.0.4
          imagePullPolicy: IfNotPresent
          name: forward-proxy
          ports:
          - containerPort: 8100
            name: port8100
            protocol: TCP
          - containerPort: 8101
            name: port8101
            protocol: TCP
          - containerPort: 8102
            name: port8102
            protocol: TCP
          - containerPort: 8103
            name: port8103
            protocol: TCP
          - containerPort: 8104
            name: port8104
            protocol: TCP
          - containerPort: 8105
            name: port8105
            protocol: TCP
          - containerPort: 8106
            name: port8106
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2021-02-23T11:02:03Z"
      lastUpdateTime: "2021-02-23T11:02:03Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-02-23T11:02:03Z"
      lastUpdateTime: "2021-02-23T11:02:03Z"
      message: ReplicaSet "forward-proxy-85687bdcd9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"grafana","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"pulsar","component":"grafana"}},"template":{"metadata":{"labels":{"app":"pulsar","component":"grafana"}},"spec":{"containers":[{"env":[{"name":"PROMETHEUS_URL","value":"http://prometheus1:9090/"}],"image":"apachepulsar/pulsar-grafana:latest","name":"grafana","ports":[{"containerPort":3000}]}]}}}}
    creationTimestamp: "2020-08-19T06:47:52Z"
    generation: 2
    name: grafana
    namespace: dataworks
    resourceVersion: "49335099"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/grafana
    uid: c25f78ce-144d-457f-80f6-bc9beecb3ec2
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pulsar
        component: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pulsar
          component: grafana
      spec:
        containers:
        - env:
          - name: PROMETHEUS_URL
            value: http://prometheus1:9090/
          image: apachepulsar/pulsar-grafana:latest
          imagePullPolicy: Always
          name: grafana
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2020-08-19T06:47:52Z"
      lastUpdateTime: "2020-08-19T06:48:10Z"
      message: ReplicaSet "grafana-55859df856" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-03-06T12:03:48Z"
      lastUpdateTime: "2021-03-06T12:03:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "16"
    creationTimestamp: "2020-10-07T10:03:44Z"
    generation: 18
    labels:
      app: indexingservice
    name: indexingservice
    namespace: dataworks
    resourceVersion: "87852027"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/indexingservice
    uid: bc7c2f70-1466-4021-b4b3-7f01c8c6dc53
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: indexingservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: indexingservice
      spec:
        containers:
        - env:
          - name: PORT
            value: "1323"
          - name: MONGO_HOST
            value: mongodb
          - name: MONGO_PORT
            value: "27017"
          - name: MONGO_DB
            value: merit
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: dataworks
          - name: POSTGRES_HOST
            value: postgres
          - name: POSTGRES_PASSWORD
            value: postgres
          - name: POSTGRES_USER
            value: postgres
          - name: TAXONOMIES_STORAGE
            value: /data/files
          - name: SLACK_HOST
            value: slack-service
          - name: SLACK_PORT
            value: "53007"
          image: dwproductionus.azurecr.io/indexing-service:1.0.13
          imagePullPolicy: IfNotPresent
          name: indexingservice
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
          - mountPath: /files
            name: public-files
          - mountPath: /private-files
            name: private-files
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dwproduction8748cee1-auth
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: public-files
          persistentVolumeClaim:
            claimName: public-files
        - name: private-files
          persistentVolumeClaim:
            claimName: private-files
        - azureFile:
            secretName: dwk8sdatastorage-secret
            shareName: data
          name: data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-07T10:03:45Z"
      lastUpdateTime: "2021-05-18T14:20:55Z"
      message: ReplicaSet "indexingservice-7f466bf964" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-29T11:16:22Z"
      lastUpdateTime: "2021-06-29T11:16:22Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 18
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-04-18T17:43:08Z"
    generation: 1
    name: jaeger-operator
    namespace: dataworks
    resourceVersion: "64620888"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/jaeger-operator
    uid: 165d1dca-837f-4672-8b04-b22773d8c56f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: jaeger-operator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: jaeger-operator
      spec:
        containers:
        - args:
          - start
          env:
          - name: WATCH_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: OPERATOR_NAME
            value: jaeger-operator
          image: jaegertracing/jaeger-operator:1.22.0
          imagePullPolicy: Always
          name: jaeger-operator
          ports:
          - containerPort: 8383
            name: http-metrics
            protocol: TCP
          - containerPort: 8686
            name: cr-metrics
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: jaeger-operator
        serviceAccountName: jaeger-operator
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-18T17:43:08Z"
      lastUpdateTime: "2021-04-18T17:43:24Z"
      message: ReplicaSet "jaeger-operator-fdd88dd95" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-21T20:22:33Z"
      lastUpdateTime: "2021-04-21T20:22:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"merit-nginx-gateway"},"name":"merit-nginx-gateway","namespace":"dataworks"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"merit-nginx-gateway"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"merit-nginx-gateway"}},"spec":{"containers":[{"image":"dwproductionus.azurecr.io/merit-nginx-gateway:v1.07","imagePullPolicy":"IfNotPresent","name":"merit-nginx-gateway","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T10:12:15Z"
    generation: 3
    labels:
      app: merit-nginx-gateway
    name: merit-nginx-gateway
    namespace: dataworks
    resourceVersion: "64621040"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/merit-nginx-gateway
    uid: 13e0f5e6-67b4-4045-8b18-e963ee6f11ab
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: merit-nginx-gateway
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: merit-nginx-gateway
      spec:
        containers:
        - image: dwproductionus.azurecr.io/merit-nginx-gateway:v1.07
          imagePullPolicy: IfNotPresent
          name: merit-nginx-gateway
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-08-26T11:21:26Z"
      lastUpdateTime: "2020-08-26T11:21:26Z"
      message: ReplicaSet "merit-nginx-gateway-5597b79b98" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-21T20:22:45Z"
      lastUpdateTime: "2021-04-21T20:22:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "18"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"nginx-gateway"},"name":"nginx-gateway","namespace":"dataworks"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"nginx-gateway"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"nginx-gateway"}},"spec":{"containers":[{"image":"dwproductionus.azurecr.io/nginx-gateway:v1.0.7","imagePullPolicy":"IfNotPresent","name":"nginx-gateway","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T10:17:09Z"
    generation: 18
    labels:
      app: nginx-gateway
    name: nginx-gateway
    namespace: dataworks
    resourceVersion: "71062851"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/nginx-gateway
    uid: 1854ed03-815f-4302-91fd-43d0068cc7fd
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx-gateway
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx-gateway
      spec:
        containers:
        - image: dwproductionus.azurecr.io/nginx-gateway:v1.0.24
          imagePullPolicy: IfNotPresent
          name: nginx-gateway
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-21T20:22:44Z"
      lastUpdateTime: "2021-04-21T20:22:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-08-26T13:11:52Z"
      lastUpdateTime: "2021-05-11T09:28:39Z"
      message: ReplicaSet "nginx-gateway-6b65797bc9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 18
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "40"
    creationTimestamp: "2021-03-14T10:04:48Z"
    generation: 54
    labels:
      app: outputfactory
      tier: dataworks
    name: outputfactory
    namespace: dataworks
    resourceVersion: "83805641"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/outputfactory
    uid: 6bcd56ae-9aa0-4ae6-8ad7-7140652c1f38
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: outputfactory
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: outputfactory
          tier: dataworks
      spec:
        containers:
        - env:
          - name: OUTPUT_STORAGE
            value: /data/csv
          - name: PORT
            value: "3003"
          - name: AZURE_STORAGE_ACCOUNT
            value: dwlake
          - name: AZURE_STORAGE_ACCESS_KEY
            value: gpGyht8mnaNMRixoJSa50DZH1X9OQuBHLurnWfJeM3FkF5eXcd5az/pTubIkJn3FBQfXts0FOKzJaTtSs17fmQ==
          - name: REDIS_HOST
            value: redis
          - name: REDIS_PORT
            value: "80"
          image: dwproductionus.azurecr.io/outputfactory:v1.48.16
          imagePullPolicy: Always
          name: outputfactory
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - azureFile:
            secretName: dwk8sdatastorage-secret
            shareName: data
          name: data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-03-14T10:04:48Z"
      lastUpdateTime: "2021-06-03T13:37:09Z"
      message: ReplicaSet "outputfactory-57968c4c9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-17T15:47:16Z"
      lastUpdateTime: "2021-06-17T15:47:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 54
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"prometheus","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"pulsar","component":"prometheus"}},"template":{"metadata":{"labels":{"app":"pulsar","component":"prometheus"}},"spec":{"containers":[{"image":"prom/prometheus:v1.6.3","name":"prometheus","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/etc/prometheus","name":"config-volume"},{"mountPath":"/prometheus","name":"data-volume"}]}],"serviceAccount":"prometheus-service-account","volumes":[{"configMap":{"name":"prometheus-config1"},"name":"config-volume"},{"name":"data-volume","persistentVolumeClaim":{"claimName":"prometheus-data-volume"}}]}}}}
    creationTimestamp: "2020-08-19T06:46:52Z"
    generation: 2
    name: prometheus
    namespace: dataworks
    resourceVersion: "49335122"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/prometheus
    uid: c079cefd-1a98-4b62-a6cc-3126126a7e29
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pulsar
        component: prometheus
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pulsar
          component: prometheus
      spec:
        containers:
        - image: prom/prometheus:v1.6.3
          imagePullPolicy: IfNotPresent
          name: prometheus
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/prometheus
            name: config-volume
          - mountPath: /prometheus
            name: data-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: prometheus-service-account
        serviceAccountName: prometheus-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-config1
          name: config-volume
        - name: data-volume
          persistentVolumeClaim:
            claimName: prometheus-data-volume
  status:
    conditions:
    - lastTransitionTime: "2020-08-19T06:46:52Z"
      lastUpdateTime: "2020-08-19T06:55:20Z"
      message: ReplicaSet "prometheus-c7bc49c6c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-03-06T12:10:34Z"
      lastUpdateTime: "2021-03-06T12:10:34Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"proxy-gateway"},"name":"proxy-gateway","namespace":"dataworks"},"spec":{"progressDeadlineSeconds":600,"replicas":0,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"proxy-gateway"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"proxy-gateway"}},"spec":{"containers":[{"image":"dwproductionus.azurecr.io/proxy-gateway:1.0.4","imagePullPolicy":"IfNotPresent","name":"proxy-gateway","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T10:22:50Z"
    generation: 3
    labels:
      app: proxy-gateway
    name: proxy-gateway
    namespace: dataworks
    resourceVersion: "45450636"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/proxy-gateway
    uid: 75dbc7a7-7d14-4da4-a641-383af8034380
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: proxy-gateway
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: proxy-gateway
      spec:
        containers:
        - image: dwproductionus.azurecr.io/proxy-gateway:1.0.4
          imagePullPolicy: IfNotPresent
          name: proxy-gateway
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2020-08-19T10:22:50Z"
      lastUpdateTime: "2020-08-19T10:22:50Z"
      message: ReplicaSet "proxy-gateway-564f9f8845" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-02-23T11:05:02Z"
      lastUpdateTime: "2021-02-23T11:05:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"generation":1,"labels":{"app":"redis"},"name":"redis","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"redis"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"redis"}},"spec":{"containers":[{"image":"redis","imagePullPolicy":"IfNotPresent","name":"redis","ports":[{"containerPort":80,"protocol":"TCP"}],"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T05:31:47Z"
    generation: 1
    labels:
      app: redis
    name: redis
    namespace: dataworks
    resourceVersion: "64620412"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/redis
    uid: 78ba54b0-34b3-4885-a6b4-615a8bb70343
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: redis
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis
      spec:
        containers:
        - image: redis
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-08-19T05:31:47Z"
      lastUpdateTime: "2020-08-19T05:31:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-08-19T05:31:47Z"
      lastUpdateTime: "2020-08-19T05:31:55Z"
      message: ReplicaSet "redis-654cc84b7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"schedulerservice","tier":"dataworks"},"name":"schedulerservice","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"schedulerservice","tier":"dataworks"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":0},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app":"schedulerservice","tier":"dataworks"}},"spec":{"containers":[{"image":"nginx:latest","imagePullPolicy":"Always","name":"schedulerservice","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T11:23:56Z"
    generation: 1
    labels:
      app: schedulerservice
      tier: dataworks
    name: schedulerservice
    namespace: dataworks
    resourceVersion: "64620204"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/schedulerservice
    uid: 90d66e7a-c91d-4203-bbf4-0f1817e60290
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: schedulerservice
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: schedulerservice
          tier: dataworks
      spec:
        containers:
        - image: nginx:latest
          imagePullPolicy: Always
          name: schedulerservice
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-08-19T11:23:56Z"
      lastUpdateTime: "2020-08-19T11:24:02Z"
      message: ReplicaSet "schedulerservice-69ddcb57c4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-21T20:21:33Z"
      lastUpdateTime: "2021-04-21T20:21:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-04-27T12:07:12Z"
    generation: 2
    labels:
      app: slack-service
    name: slack-service
    namespace: dataworks
    resourceVersion: "66556443"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/slack-service
    uid: 50158ee4-dc85-4ee2-aa98-4125bc1ef2dc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: slack-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: slack-service
      spec:
        containers:
        - env:
          - name: PORT
            value: "1323"
          image: dwproductionus.azurecr.io/slack-service:1.0.1
          imagePullPolicy: IfNotPresent
          name: slack-service
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
          - mountPath: /files
            name: public-files
          - mountPath: /private-files
            name: private-files
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dwproduction8748cee1-auth
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: public-files
          persistentVolumeClaim:
            claimName: public-files
        - name: private-files
          persistentVolumeClaim:
            claimName: private-files
        - azureFile:
            secretName: dwk8sdatastorage-secret
            shareName: data
          name: data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-27T12:08:30Z"
      lastUpdateTime: "2021-04-27T12:08:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-04-27T12:07:12Z"
      lastUpdateTime: "2021-04-27T21:34:22Z"
      message: ReplicaSet "slack-service-6cdf667964" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "64"
    creationTimestamp: "2020-10-28T13:48:13Z"
    generation: 120
    labels:
      app: statsservice
      tier: dataworks
    name: statsservice
    namespace: dataworks
    resourceVersion: "87851981"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/statsservice
    uid: 22e9b33b-6194-493b-ba99-6ee58714d35d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: statsservice
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: statsservice
          tier: dataworks
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            value: redis
          - name: REDIS_PORT
            value: "80"
          - name: CRUD_SERVICE
            value: configdatamanagementservice
          - name: CRUD_PORT
            value: "53001"
          image: dwproductionus.azurecr.io/statsservice:v1.0.66
          imagePullPolicy: Always
          name: statsservice
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-28T13:48:14Z"
      lastUpdateTime: "2021-06-24T10:06:38Z"
      message: ReplicaSet "statsservice-594f57fc7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-29T11:16:15Z"
      lastUpdateTime: "2021-06-29T11:16:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 120
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: superset
      meta.helm.sh/release-namespace: dataworks
    creationTimestamp: "2020-08-19T08:01:12Z"
    generation: 2
    labels:
      app: superset
      app.kubernetes.io/managed-by: Helm
      chart: superset-0.1.0
      heritage: Helm
      release: superset
    name: superset
    namespace: dataworks
    resourceVersion: "144537"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/superset
    uid: 155374a5-2614-4d96-a34b-bccdb4711815
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: superset
        release: superset
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: superset
          release: superset
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - . /app/pythonpath/superset_bootstrap.sh; /usr/bin/docker-entrypoint.sh
          env:
          - name: SUPERSET_PORT
            value: "8088"
          envFrom:
          - secretRef:
              name: superset-env
          image: preset/superset:latest
          imagePullPolicy: IfNotPresent
          name: superset
          ports:
          - containerPort: 8088
            name: http
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/pythonpath
            name: superset-config
            readOnly: true
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/sh
          - -c
          - until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1;
            done
          envFrom:
          - secretRef:
              name: superset-env
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-postgres
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 0
        terminationGracePeriodSeconds: 30
        volumes:
        - name: superset-config
          secret:
            defaultMode: 420
            secretName: superset-config
  status:
    conditions:
    - lastTransitionTime: "2020-08-19T08:01:12Z"
      lastUpdateTime: "2020-08-19T08:02:18Z"
      message: ReplicaSet "superset-5bdc9554d9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-08-19T08:07:35Z"
      lastUpdateTime: "2020-08-19T08:07:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "18"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"testingservice","tier":"dataworks"},"name":"testingservice","namespace":"dataworks"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"testingservice","tier":"dataworks"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":0},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app":"testingservice","tier":"dataworks"}},"spec":{"containers":[{"env":[{"name":"MONGO_HOST","value":"mongodb"},{"name":"pulsar_url","value":"pulsar"},{"name":"CAPTCHA_SERVICE","value":"captcha-solver"},{"name":"CAPTCHA_PORT","value":"80"}],"image":"dwproductionus.azurecr.io/merit-ext-test-serv:v1.50","imagePullPolicy":"Always","name":"testingservice","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}}}
    creationTimestamp: "2020-08-19T11:26:28Z"
    generation: 18
    labels:
      app: testingservice
      tier: dataworks
    name: testingservice
    namespace: dataworks
    resourceVersion: "80373769"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/testingservice
    uid: a6ffc17e-4ccd-4672-90c3-979aee9f0f74
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: testingservice
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: testingservice
          tier: dataworks
      spec:
        containers:
        - env:
          - name: MONGO_HOST
            value: mongodb
          - name: pulsar_url
            value: pulsar
          - name: CAPTCHA_SERVICE
            value: captcha-solver
          - name: CAPTCHA_PORT
            value: "80"
          image: dwproductionus.azurecr.io/merit-ext-test-serv:v1.69
          imagePullPolicy: Always
          name: testingservice
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-08-26T12:39:03Z"
      lastUpdateTime: "2021-05-11T14:41:34Z"
      message: ReplicaSet "testingservice-cf7f55c6f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-07T14:48:44Z"
      lastUpdateTime: "2021-06-07T14:48:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 18
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "126"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"workerbot","tier":"dataworks"},"name":"workerbot","namespace":"dataworks"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"workerbot","tier":"dataworks"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":0},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"workerbot","tier":"dataworks"}},"spec":{"containers":[{"env":[{"name":"PROXIES_FILE","value":"app/proxies.txt"},{"name":"DASHBOARD_HOST","value":"http://meritdashboard"},{"name":"CASSANDRA_HOST","value":"cassandra"},{"name":"CASSANDRA_KEYSPACE","value":"dataworks"},{"name":"MAX_GOROUTINES","value":"10"},{"name":"PULSAR_HOST","value":"pulsar:6650"},{"name":"CAPTCHA_SERVICE","value":"captcha-solver"},{"name":"CAPTCHA_PORT","value":"80"},{"name":"REDIS_HOST","value":"redis"},{"name":"REDIS_PORT","value":"80"}],"image":"dwproductionus.azurecr.io/merit-workerbot:v1.61.7","imagePullPolicy":"Always","name":"workerbot","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/data","name":"data"}]}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30,"volumes":[{"azureFile":{"secretName":"dwk8sdatastorage-secret","shareName":"data"},"name":"data"}]}}}}
    creationTimestamp: "2020-08-19T11:28:43Z"
    generation: 511
    labels:
      app: workerbot
      tier: dataworks
    name: workerbot
    namespace: dataworks
    resourceVersion: "85435476"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/workerbot
    uid: aad87c6c-536b-4d59-ac3c-821c93d8818d
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: workerbot
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: workerbot
          tier: dataworks
      spec:
        containers:
        - env:
          - name: PROXIES_FILE
            value: app/proxies.txt
          - name: DASHBOARD_HOST
            value: http://configdatamanagementservice/v2
          - name: CASSANDRA_HOST
            value: cassandra
          - name: CASSANDRA_KEYSPACE
            value: dataworks
          - name: MAX_GOROUTINES
            value: "11"
          - name: PULSAR_HOST
            value: pulsar:6650
          - name: CAPTCHA_SERVICE
            value: captcha-solver
          - name: CAPTCHA_PORT
            value: "80"
          - name: REDIS_HOST
            value: redis
          - name: REDIS_PORT
            value: "80"
          - name: CACHE_STORAGE
            value: /data/cache
          - name: AZURE_STORAGE_ACCOUNT
            value: dwlake
          - name: AZURE_STORAGE_ACCESS_KEY
            value: gpGyht8mnaNMRixoJSa50DZH1X9OQuBHLurnWfJeM3FkF5eXcd5az/pTubIkJn3FBQfXts0FOKzJaTtSs17fmQ==
          image: dwproductionus.azurecr.io/merit-workerbot:v1.61.98
          imagePullPolicy: Always
          name: workerbot
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 64Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - azureFile:
            secretName: dwk8sdatastorage-secret
            shareName: data
          name: data
  status:
    conditions:
    - lastTransitionTime: "2020-11-07T12:59:19Z"
      lastUpdateTime: "2021-06-03T13:39:51Z"
      message: ReplicaSet "workerbot-d8fb9f458" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-20T19:23:23Z"
      lastUpdateTime: "2021-06-20T19:23:23Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 511
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "17"
    creationTimestamp: "2020-10-28T13:55:49Z"
    generation: 33
    labels:
      app: ws-service
      tier: dataworks
    name: ws-service
    namespace: dataworks
    resourceVersion: "79325455"
    selfLink: /apis/apps/v1/namespaces/dataworks/deployments/ws-service
    uid: bf90d8d9-9bbe-4146-8cbf-ea2b5483f4e5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ws-service
        tier: dataworks
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ws-service
          tier: dataworks
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            value: redis
          - name: REDIS_PORT
            value: "80"
          - name: CRUD_SERVICE
            value: configdatamanagementservice
          - name: CRUD_PORT
            value: "53001"
          image: dwproductionus.azurecr.io/ws-service:v1.0.14
          imagePullPolicy: Always
          name: ws-service
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-28T13:55:49Z"
      lastUpdateTime: "2021-03-23T19:50:25Z"
      message: ReplicaSet "ws-service-56cf6fdd8b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-04T13:14:15Z"
      lastUpdateTime: "2021-06-04T13:14:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 33
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
