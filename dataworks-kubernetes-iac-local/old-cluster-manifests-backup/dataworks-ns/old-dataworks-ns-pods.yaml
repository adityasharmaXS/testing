apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:11Z"
    generateName: captcha-solver-54d84f4656-
    labels:
      app: captcha-solver
      pod-template-hash: 54d84f4656
      tier: dataworks
    name: captcha-solver-54d84f4656-gcvwc
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: captcha-solver-54d84f4656
      uid: 559fe965-e2b0-4ff3-9e44-6078ea433a01
    resourceVersion: "64620312"
    selfLink: /api/v1/namespaces/dataworks/pods/captcha-solver-54d84f4656-gcvwc
    uid: e7dcdf4b-fd23-4d62-90d9-0de13870e784
  spec:
    containers:
    - image: dwproductionus.azurecr.io/captcha_solver:1.0.1
      imagePullPolicy: Always
      name: captcha-solver
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:20:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:20:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://dfe5e9d64495e7c179fb303eefe484fd1b6776987c583043a65698c8dc020c41
      image: dwproductionus.azurecr.io/captcha_solver:1.0.1
      imageID: docker-pullable://dwproductionus.azurecr.io/captcha_solver@sha256:c48721051e9a26108729abf8569aec6642f52f1c431c616e6d7441530e37cd6d
      lastState:
        terminated:
          containerID: docker://a635639760420d7694d258a8767e9b7e1b4c031add9328afc7bd2e4f0b047184
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-02-23T13:26:55Z"
      name: captcha-solver
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:20:01Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.247
    podIPs:
    - ip: 10.240.0.247
    qosClass: BestEffort
    startTime: "2021-02-23T13:26:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-17T15:55:33Z"
    generateName: configdatamanagementservice-7bc8788f4-
    labels:
      app: configdatamanagementservice
      pod-template-hash: 7bc8788f4
    name: configdatamanagementservice-7bc8788f4-wzjsw
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: configdatamanagementservice-7bc8788f4
      uid: fdccbb76-af97-4393-93e1-bba3637d957c
    resourceVersion: "83807790"
    selfLink: /api/v1/namespaces/dataworks/pods/configdatamanagementservice-7bc8788f4-wzjsw
    uid: 3390f84a-9196-4cdb-8a1a-a71b95b0f830
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        valueFrom:
          secretKeyRef:
            key: redis_host
            name: configdatamanagement-secret
      - name: REDIS_PORT
        valueFrom:
          secretKeyRef:
            key: redis_port
            name: configdatamanagement-secret
      - name: JWT
        valueFrom:
          secretKeyRef:
            key: jwt
            name: configdatamanagement-secret
      - name: SESSION_KEY
        valueFrom:
          secretKeyRef:
            key: session_key
            name: configdatamanagement-secret
      - name: PORT
        value: "3001"
      - name: GRPCPORT
        value: "53001"
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            key: postgres_user
            name: configdatamanagement-secret
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres_password
            name: configdatamanagement-secret
      - name: POSTGRES_HOST
        valueFrom:
          secretKeyRef:
            key: postgres_host
            name: configdatamanagement-secret
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            key: postgres_db
            name: configdatamanagement-secret
      - name: POSTGRES_DB_TEST
        valueFrom:
          secretKeyRef:
            key: postgres_db_test
            name: configdatamanagement-secret
      - name: POSTGRES_PORT
        valueFrom:
          secretKeyRef:
            key: postgres_port
            name: configdatamanagement-secret
      - name: MONGO_HOST
        valueFrom:
          secretKeyRef:
            key: mongo_host
            name: configdatamanagement-secret
      - name: MONGO_PORT
        valueFrom:
          secretKeyRef:
            key: mongo_port
            name: configdatamanagement-secret
      - name: MONGO_DB
        valueFrom:
          secretKeyRef:
            key: mongo_db
            name: configdatamanagement-secret
      - name: MONGO_DB_TEST
        valueFrom:
          secretKeyRef:
            key: mongo_db_test
            name: configdatamanagement-secret
      - name: AZURE_STORAGE_ACCOUNT
        valueFrom:
          secretKeyRef:
            key: azure_storage_account
            name: configdatamanagement-secret
      - name: AZURE_STORAGE_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            key: azure_storage_access_key
            name: configdatamanagement-secret
      - name: PUBLIC_STORAGE
        value: /data/public-files
      - name: PRIVATE_STORAGE
        value: /data/private-files
      - name: TAXONOMIES_STORAGE
        value: /data/files
      - name: CSV_STORAGE
        value: /data/csv
      image: dwproductionus.azurecr.io/config-data-management-service:298
      imagePullPolicy: Always
      name: configdatamanagementservice
      ports:
      - containerPort: 53001
        protocol: TCP
      - containerPort: 3003
        name: datamanagement
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: dwproductionus9082ae7e-auth
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:55:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:55:37Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:55:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:55:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b207a090c3b4149698bc64ca22b537e11e08a2c981b5163a8e27f473b37f3c04
      image: dwproductionus.azurecr.io/config-data-management-service:298
      imageID: docker-pullable://dwproductionus.azurecr.io/config-data-management-service@sha256:54e8e17b332da9ec480343ea6972faef6188ba94a4b21e3051ec806615f9f64c
      lastState: {}
      name: configdatamanagementservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-17T15:55:37Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.209
    podIPs:
    - ip: 10.240.0.209
    qosClass: BestEffort
    startTime: "2021-06-17T15:55:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-16T12:32:31Z"
    generateName: dashboardui-fb7fbc89b-
    labels:
      app: dashboardui
      pod-template-hash: fb7fbc89b
    name: dashboardui-fb7fbc89b-qxg5h
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dashboardui-fb7fbc89b
      uid: b14055bd-2aae-4f70-9636-39abfef5f5ec
    resourceVersion: "83417788"
    selfLink: /api/v1/namespaces/dataworks/pods/dashboardui-fb7fbc89b-qxg5h
    uid: 84944c83-8e4b-48be-9a85-9a8b48d83be6
  spec:
    containers:
    - image: dwproductionus.azurecr.io/dashboard-ui:294
      imagePullPolicy: Always
      name: dashboardui
      ports:
      - containerPort: 3000
        name: dashboardui
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: dwproductionus9082ae7e-auth
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-16T12:32:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-16T12:32:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-16T12:32:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-16T12:32:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0439b05d1f466114595b50816b7db05f565c2500859991ebbc5c9afe8246391d
      image: dwproductionus.azurecr.io/dashboard-ui:294
      imageID: docker-pullable://dwproductionus.azurecr.io/dashboard-ui@sha256:616bed5291febb32d00094afaf3e866966b5b947c6696b0ecc2eaef5a76408c7
      lastState: {}
      name: dashboardui
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-16T12:32:36Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.160
    podIPs:
    - ip: 10.240.0.160
    qosClass: BestEffort
    startTime: "2021-06-16T12:32:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-29T11:16:19Z"
    generateName: indexingservice-7f466bf964-
    labels:
      app: indexingservice
      pod-template-hash: 7f466bf964
    name: indexingservice-7f466bf964-sbtrn
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: indexingservice-7f466bf964
      uid: 4b862eac-681a-4fca-a274-5fddafad0081
    resourceVersion: "87852024"
    selfLink: /api/v1/namespaces/dataworks/pods/indexingservice-7f466bf964-sbtrn
    uid: 7a1aa2ed-b575-420f-8af5-70f75d9d91cd
  spec:
    containers:
    - env:
      - name: PORT
        value: "1323"
      - name: MONGO_HOST
        value: mongodb
      - name: MONGO_PORT
        value: "27017"
      - name: MONGO_DB
        value: merit
      - name: POSTGRES_PORT
        value: "5432"
      - name: POSTGRES_DB
        value: dataworks
      - name: POSTGRES_HOST
        value: postgres
      - name: POSTGRES_PASSWORD
        value: postgres
      - name: POSTGRES_USER
        value: postgres
      - name: TAXONOMIES_STORAGE
        value: /data/files
      - name: SLACK_HOST
        value: slack-service
      - name: SLACK_PORT
        value: "53007"
      image: dwproductionus.azurecr.io/indexing-service:1.0.13
      imagePullPolicy: IfNotPresent
      name: indexingservice
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /files
        name: public-files
      - mountPath: /private-files
        name: private-files
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: dwproduction8748cee1-auth
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: public-files
      persistentVolumeClaim:
        claimName: public-files
    - name: private-files
      persistentVolumeClaim:
        claimName: private-files
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2ef84fb04ff1a242db7d641426f1f7073320352707a8d19ff5a9cce33ee15e55
      image: dwproductionus.azurecr.io/indexing-service:1.0.13
      imageID: docker-pullable://dwproductionus.azurecr.io/indexing-service@sha256:be3c6675f3d27dd5b8d1623f96a0776c7033f46201ef46c11fac0914acfb65ed
      lastState: {}
      name: indexingservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-29T11:16:21Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.52
    podIPs:
    - ip: 10.240.1.52
    qosClass: BestEffort
    startTime: "2021-06-29T11:16:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-18T17:43:08Z"
    generateName: jaeger-operator-fdd88dd95-
    labels:
      name: jaeger-operator
      pod-template-hash: fdd88dd95
    name: jaeger-operator-fdd88dd95-wr79d
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: jaeger-operator-fdd88dd95
      uid: ef64008e-730b-46b2-a2aa-a8ebbb1dfe2c
    resourceVersion: "64620885"
    selfLink: /api/v1/namespaces/dataworks/pods/jaeger-operator-fdd88dd95-wr79d
    uid: 0068a13d-08a5-4950-a151-4a90ae276ef0
  spec:
    containers:
    - args:
      - start
      env:
      - name: WATCH_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: OPERATOR_NAME
        value: jaeger-operator
      image: jaegertracing/jaeger-operator:1.22.0
      imagePullPolicy: Always
      name: jaeger-operator
      ports:
      - containerPort: 8383
        name: http-metrics
        protocol: TCP
      - containerPort: 8686
        name: cr-metrics
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: jaeger-operator-token-wk5pl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: jaeger-operator
    serviceAccountName: jaeger-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: jaeger-operator-token-wk5pl
      secret:
        defaultMode: 420
        secretName: jaeger-operator-token-wk5pl
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-18T17:43:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:21:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:21:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-18T17:43:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://aba6248ada4281e12b5f89db071c2d782678e58a8487174737b2e8645e0e005e
      image: jaegertracing/jaeger-operator:1.22.0
      imageID: docker-pullable://jaegertracing/jaeger-operator@sha256:2d1912108ff7152ef913b8c45aec7eb41ed4c442e54b7b1a55a028b35e2a22cc
      lastState:
        terminated:
          containerID: docker://24205dd7ac17ef6dd672655a93e85f649a1c1beae70cd6cefb61eba4b03bc534
          exitCode: 1
          finishedAt: "2021-04-21T20:21:00Z"
          reason: Error
          startedAt: "2021-04-21T20:20:29Z"
      name: jaeger-operator
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:21:16Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.228
    podIPs:
    - ip: 10.240.0.228
    qosClass: BestEffort
    startTime: "2021-04-18T17:43:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-29T11:15:55Z"
    generateName: job-manager-
    labels:
      app: job-manager
      controller-revision-hash: job-manager-84bb45785d
      statefulset.kubernetes.io/pod-name: job-manager-0
      tier: dataworks
    name: job-manager-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: job-manager
      uid: ee7ad818-5817-4e4e-956c-cb58925764ad
    resourceVersion: "87851873"
    selfLink: /api/v1/namespaces/dataworks/pods/job-manager-0
    uid: b9544ea4-ddbf-4305-8ce7-0aeed0b656ba
  spec:
    containers:
    - env:
      - name: PORT
        value: "3335"
      - name: REDIS_HOST
        value: redis
      - name: REDIS_PORT
        value: "80"
      - name: MAX_QUEUE_BUFFER_COUNT
        value: "2000"
      image: dwproductionus.azurecr.io/jobmanager:v1.0.26.16
      imagePullPolicy: Always
      name: job-manager
      ports:
      - containerPort: 3335
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: job-manager-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: job-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://46677a87a920403f32cb7c0c86af7f058efaf7856797e1b187544cf1d855fc76
      image: dwproductionus.azurecr.io/jobmanager:v1.0.26.16
      imageID: docker-pullable://dwproductionus.azurecr.io/jobmanager@sha256:abda190a0cc7a57f90472fc06c69037db5bfdc8bb3a23a5547860fe074b1a65a
      lastState: {}
      name: job-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-29T11:15:57Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.178
    podIPs:
    - ip: 10.240.0.178
    qosClass: BestEffort
    startTime: "2021-06-29T11:15:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-29T11:16:00Z"
    generateName: jobfactory-
    labels:
      app: jobfactory
      controller-revision-hash: jobfactory-6d8fd46cdb
      statefulset.kubernetes.io/pod-name: jobfactory-0
      tier: dataworks
    name: jobfactory-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: jobfactory
      uid: 0de392de-72a0-4d36-a5d5-e48a9b37c575
    resourceVersion: "87851920"
    selfLink: /api/v1/namespaces/dataworks/pods/jobfactory-0
    uid: 6fc7a7f0-73e0-4086-b67e-f11fdf17de85
  spec:
    containers:
    - env:
      - name: HTTP_PORT
        value: "3334"
      - name: GRPC_PORT
        value: "53334"
      - name: MONGO_HOST
        value: mongodb
      - name: MONGO_PORT
        value: "27017"
      - name: MONGO_DB
        value: merit
      - name: PULSAR_HOST
        value: pulsar:6650
      - name: DASHBOARD_HOST
        value: meritdashboard
      - name: OUTPUT_STORAGE
        value: /data/csv
      - name: FILE_SHARE
        value: /data/files
      - name: CACHE_STORAGE
        value: /data/cache
      - name: OUTPUT_FACTORY_HOST
        value: http://outputfactory
      - name: REDIS_HOST
        value: redis
      - name: REDIS_PORT
        value: "80"
      - name: REDIS_EXPIRATION
        value: "1440"
      - name: DATA_MANAGEMENT_SERVICE
        value: http://configdatamanagementservice
      - name: CRUD_SERVICE
        value: configdatamanagementservice
      - name: CRUD_PORT
        value: "53001"
      image: dwproductionus.azurecr.io/merit-jobfactory:v1.25.61
      imagePullPolicy: Always
      name: jobfactory
      ports:
      - containerPort: 80
        protocol: TCP
      - containerPort: 53334
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: jobfactory-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: jobfactory
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6d754c8dfcc6af19ccec8df3322f863ab3bde0470f7efa2f344e7895d87433c4
      image: dwproductionus.azurecr.io/merit-jobfactory:v1.25.61
      imageID: docker-pullable://dwproductionus.azurecr.io/merit-jobfactory@sha256:dab7bbda16075ef7d896a149b654b90e8794baaabad1a4849d5417baf4dfa210
      lastState: {}
      name: jobfactory
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-29T11:16:04Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.62
    podIPs:
    - ip: 10.240.1.62
    qosClass: BestEffort
    startTime: "2021-06-29T11:16:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"kube-dump"},"name":"kube-dump","namespace":"dataworks"},"spec":{"containers":[{"args":["while true; do sleep 60; done;"],"command":["/bin/bash","-c","--"],"env":[{"name":"MODE","value":"dump"},{"name":"DESTINATION_DIR","value":"/data/dump"},{"name":"GIT_PUSH","value":"true"},{"name":"GIT_BRANCH","value":"master"},{"name":"GIT_REMOTE_URL","value":"https://dataworks-dev@dev.azure.com/dataworks-dev/DataWorks/_git/kubernetes-cluster-dump"},{"name":"GIT_COMMIT_EMAIL","value":"NosaOmorodion@allenoneillgmail.onmicrosoft.com"},{"name":"GIT_COMMIT_USER","value":"NosaOmorodion"}],"image":"woozymasta/kube-dump:1.0","imagePullPolicy":"IfNotPresent","name":"kube-dump","resources":{"limits":{"cpu":"500m","memory":"200Mi"},"requests":{"cpu":"200m","memory":"100Mi"}},"volumeMounts":[{"mountPath":"/data","name":"data"},{"mountPath":"/root/.ssh/id_ed25519","name":"key","subPath":"id_ed25519"},{"mountPath":"/root/.ssh/id_ed25519.pub","name":"key-pub","subPath":"id_ed25519.pub"}]}],"restartPolicy":"OnFailure","serviceAccountName":"kube-dump","volumes":[{"name":"data","persistentVolumeClaim":{"claimName":"kube-dump"}},{"name":"key","secret":{"items":[{"key":"kube-dump","mode":384,"path":"id_ed25519"}],"secretName":"kube-dump-key"}},{"name":"key-pub","secret":{"items":[{"key":"kube-dump.pub","mode":384,"path":"id_ed25519.pub"}],"secretName":"kube-dump-key"}}]}}
    creationTimestamp: "2021-04-15T01:55:39Z"
    labels:
      app: kube-dump
    name: kube-dump
    namespace: dataworks
    resourceVersion: "64620513"
    selfLink: /api/v1/namespaces/dataworks/pods/kube-dump
    uid: 3ed5b456-5bbf-4c96-89bc-2747a955e741
  spec:
    containers:
    - args:
      - while true; do sleep 60; done;
      command:
      - /bin/bash
      - -c
      - --
      env:
      - name: MODE
        value: dump
      - name: DESTINATION_DIR
        value: /data/dump
      - name: GIT_PUSH
        value: "true"
      - name: GIT_BRANCH
        value: master
      - name: GIT_REMOTE_URL
        value: https://dataworks-dev@dev.azure.com/dataworks-dev/DataWorks/_git/kubernetes-cluster-dump
      - name: GIT_COMMIT_EMAIL
        value: NosaOmorodion@allenoneillgmail.onmicrosoft.com
      - name: GIT_COMMIT_USER
        value: NosaOmorodion
      image: woozymasta/kube-dump:1.0
      imagePullPolicy: IfNotPresent
      name: kube-dump
      resources:
        limits:
          cpu: 500m
          memory: 200Mi
        requests:
          cpu: 200m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /root/.ssh/id_ed25519
        name: key
        subPath: id_ed25519
      - mountPath: /root/.ssh/id_ed25519.pub
        name: key-pub
        subPath: id_ed25519.pub
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dump-token-szlhv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-dump
    serviceAccountName: kube-dump
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: kube-dump
    - name: key
      secret:
        defaultMode: 420
        items:
        - key: kube-dump
          mode: 384
          path: id_ed25519
        secretName: kube-dump-key
    - name: key-pub
      secret:
        defaultMode: 420
        items:
        - key: kube-dump.pub
          mode: 384
          path: id_ed25519.pub
        secretName: kube-dump-key
    - name: kube-dump-token-szlhv
      secret:
        defaultMode: 420
        secretName: kube-dump-token-szlhv
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-15T01:55:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:21:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:21:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-15T01:55:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://65150dd921528d1664856f27f735148d081a489f8162e52bf41086223861d61b
      image: woozymasta/kube-dump:1.0
      imageID: docker-pullable://woozymasta/kube-dump@sha256:5d8bc2ef0361972f2f92901057d61cb8707681f48ecc104e68dbc97c3635c5c9
      lastState:
        terminated:
          containerID: docker://ddfa330a45919faacce7bb2e31ebb482bb1046d9bdda10fc668467fb28ecc938
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-04-15T01:56:47Z"
      name: kube-dump
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:21:10Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.232
    podIPs:
    - ip: 10.240.0.232
    qosClass: Burstable
    startTime: "2021-04-15T01:55:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T17:37:02Z"
    generateName: merit-nginx-gateway-5597b79b98-
    labels:
      app: merit-nginx-gateway
      pod-template-hash: 5597b79b98
    name: merit-nginx-gateway-5597b79b98-99tg5
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: merit-nginx-gateway-5597b79b98
      uid: dc455da8-4472-42d5-8e61-0b37607dc75a
    resourceVersion: "64621037"
    selfLink: /api/v1/namespaces/dataworks/pods/merit-nginx-gateway-5597b79b98-99tg5
    uid: cb7709ac-071f-414d-97ae-1f7bd0149465
  spec:
    containers:
    - image: dwproductionus.azurecr.io/merit-nginx-gateway:v1.07
      imagePullPolicy: IfNotPresent
      name: merit-nginx-gateway
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T17:37:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:22:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:22:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T17:37:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8fe77221bcc02c0076eccd96667ebc242003a93ae93dd3eb67b74e27461fc396
      image: dwproductionus.azurecr.io/merit-nginx-gateway:v1.07
      imageID: docker-pullable://dwproductionus.azurecr.io/merit-nginx-gateway@sha256:db452640e131af15da192cea2f04d8ba83d7254f4100e9559c07034b93902869
      lastState:
        terminated:
          containerID: docker://f01a002d3e2cffae453f181ff7cf4d319d9f7047ee389e180852d7d15d08293d
          exitCode: 1
          finishedAt: "2021-04-21T20:21:28Z"
          reason: Error
          startedAt: "2021-04-21T20:21:28Z"
      name: merit-nginx-gateway
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:22:19Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.0
    podIPs:
    - ip: 10.240.1.0
    qosClass: BestEffort
    startTime: "2021-03-06T17:37:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:47Z"
    generateName: mongo-
    labels:
      app: mongodb
      controller-revision-hash: mongo-7ff7fdb54d
      statefulset.kubernetes.io/pod-name: mongo-0
      tier: dataworks
    name: mongo-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: mongo
      uid: 1a077500-9ae8-466e-923d-79e80f6db41f
    resourceVersion: "64620794"
    selfLink: /api/v1/namespaces/dataworks/pods/mongo-0
    uid: ad0f0a3d-7dcc-46c8-99ca-bb444e87ee32
  spec:
    containers:
    - env:
      - name: ALLOW_EMPTY_PASSWORD
        value: "yes"
      image: mongo
      imagePullPolicy: Always
      name: mongodb
      ports:
      - containerPort: 27017
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data/db
        name: mongodb-data
      - mountPath: /restored
        name: mongodb-data-restore
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: mongo-0
    initContainers:
    - command:
      - chown
      - -R
      - 0999:0999
      - /data/db
      image: busybox
      imagePullPolicy: Always
      name: volume-permissions
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data/db
        name: mongodb-data
      - mountPath: /restored
        name: mongodb-data-restore
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: mongodb
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-data
      persistentVolumeClaim:
        claimName: mongodb-data
    - name: mongodb-data-restore
      persistentVolumeClaim:
        claimName: mongodb-data-restore
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T12:10:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:21:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:21:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T12:09:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1eb81c4955fd58fff80ba2325fb463fa9b02b86fd4b0b141572b58394b3e165e
      image: mongo:latest
      imageID: docker-pullable://mongo@sha256:b66f48968d757262e5c29979e6aa3af944d4ef166314146e1b3a788f0d191ac3
      lastState:
        terminated:
          containerID: docker://bb1788be05c1943ecf32b5540b79362d4441d8fd552c2a2b9f8e1616fea7c9b9
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-03-06T12:11:00Z"
      name: mongodb
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:21:46Z"
    hostIP: 10.240.0.159
    initContainerStatuses:
    - containerID: docker://c7add365b2866b240c9822aad7946dd13960604d22e375ac44823550c26f4a0a
      image: busybox:latest
      imageID: docker-pullable://busybox@sha256:ae39a6f5c07297d7ab64dbd4f82c77c874cc6a94cea29fdec309d0992574b4f7
      lastState: {}
      name: volume-permissions
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://c7add365b2866b240c9822aad7946dd13960604d22e375ac44823550c26f4a0a
          exitCode: 0
          finishedAt: "2021-04-21T20:21:28Z"
          reason: Completed
          startedAt: "2021-04-21T20:21:27Z"
    phase: Running
    podIP: 10.240.1.143
    podIPs:
    - ip: 10.240.1.143
    qosClass: BestEffort
    startTime: "2021-03-06T12:09:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-30T20:11:36Z"
    generateName: mongodb-backup-1613692800-
    labels:
      controller-uid: f22a87e0-64a5-4214-ac51-d713d1a916a5
      job-name: mongodb-backup-1613692800
    name: mongodb-backup-1613692800-g9sxd
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613692800
      uid: f22a87e0-64a5-4214-ac51-d713d1a916a5
    resourceVersion: "77713624"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613692800-g9sxd
    uid: fc8ee9c2-bdb6-4cc8-aeb5-2df57aabeea5
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-30T20:11:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-30T20:11:37Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-30T20:11:37Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-30T20:11:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.159
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-30T20:11:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:19Z"
    generateName: mongodb-backup-1613692800-
    labels:
      controller-uid: f22a87e0-64a5-4214-ac51-d713d1a916a5
      job-name: mongodb-backup-1613692800
    name: mongodb-backup-1613692800-zbdkz
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613692800
      uid: f22a87e0-64a5-4214-ac51-d713d1a916a5
    resourceVersion: "75583681"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613692800-zbdkz
    uid: 08f09a59-6e53-494a-92a5-f270625394b9
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:34:18Z"
    generateName: mongodb-backup-1613714400-
    labels:
      controller-uid: 4e58ae5d-e84b-450a-b28f-c95a7a3ec96e
      job-name: mongodb-backup-1613714400
    name: mongodb-backup-1613714400-tj6m7
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613714400
      uid: 4e58ae5d-e84b-450a-b28f-c95a7a3ec96e
    resourceVersion: "68119781"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613714400-tj6m7
    uid: 5064ff11-febb-4426-bc15-f90c1c6dad68
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:34:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:19Z"
    generateName: mongodb-backup-1613714400-
    labels:
      controller-uid: 4e58ae5d-e84b-450a-b28f-c95a7a3ec96e
      job-name: mongodb-backup-1613714400
    name: mongodb-backup-1613714400-xrfg9
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613714400
      uid: 4e58ae5d-e84b-450a-b28f-c95a7a3ec96e
    resourceVersion: "68119774"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613714400-xrfg9
    uid: 901aee32-33cb-4d98-8e92-009ae1408ad6
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-29T15:19:55Z"
    generateName: mongodb-backup-1613736000-
    labels:
      controller-uid: 94cfbbb1-12f8-496f-8f81-c4fc8901ed7c
      job-name: mongodb-backup-1613736000
    name: mongodb-backup-1613736000-4hvr4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613736000
      uid: 94cfbbb1-12f8-496f-8f81-c4fc8901ed7c
    resourceVersion: "68119836"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613736000-4hvr4
    uid: 3c65116f-8abe-4e7d-a9de-1590a34e0490
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-29T15:19:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:27Z"
    generateName: mongodb-backup-1613736000-
    labels:
      controller-uid: 94cfbbb1-12f8-496f-8f81-c4fc8901ed7c
      job-name: mongodb-backup-1613736000
    name: mongodb-backup-1613736000-98tnn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613736000
      uid: 94cfbbb1-12f8-496f-8f81-c4fc8901ed7c
    resourceVersion: "67107864"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613736000-98tnn
    uid: 13fc22ba-0004-45e3-aff7-eb89c1d2b1e8
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:34:35Z"
    generateName: mongodb-backup-1613736000-
    labels:
      controller-uid: 94cfbbb1-12f8-496f-8f81-c4fc8901ed7c
      job-name: mongodb-backup-1613736000
    name: mongodb-backup-1613736000-ls7g7
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613736000
      uid: 94cfbbb1-12f8-496f-8f81-c4fc8901ed7c
    resourceVersion: "68119875"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613736000-ls7g7
    uid: 46f7db7c-dd2c-4145-a0d8-8611df000c00
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:35Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:35Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:34:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:19Z"
    generateName: mongodb-backup-1613757600-
    labels:
      controller-uid: ac3e0d5b-ca67-4453-98fc-85af8ed6df25
      job-name: mongodb-backup-1613757600
    name: mongodb-backup-1613757600-6fprd
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613757600
      uid: ac3e0d5b-ca67-4453-98fc-85af8ed6df25
    resourceVersion: "68131041"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613757600-6fprd
    uid: 787edd00-dbb3-4247-9e4c-f3953b3f8950
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:31:05Z"
    generateName: mongodb-backup-1613757600-
    labels:
      controller-uid: ac3e0d5b-ca67-4453-98fc-85af8ed6df25
      job-name: mongodb-backup-1613757600
    name: mongodb-backup-1613757600-kcgr4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613757600
      uid: ac3e0d5b-ca67-4453-98fc-85af8ed6df25
    resourceVersion: "68131047"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613757600-kcgr4
    uid: 0e817d28-d7d5-47e0-ae67-a810e337cf56
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:31:05Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:31:05Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:31:05Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:31:05Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:31:05Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:32Z"
    generateName: mongodb-backup-1613779200-
    labels:
      controller-uid: 0259d137-ebef-4e1c-9bd0-896e1c9214f6
      job-name: mongodb-backup-1613779200
    name: mongodb-backup-1613779200-6xsmt
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613779200
      uid: 0259d137-ebef-4e1c-9bd0-896e1c9214f6
    resourceVersion: "68117271"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613779200-6xsmt
    uid: 912d45e6-203c-4eff-aa0f-b0427db0b64b
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:11Z"
    generateName: mongodb-backup-1613779200-
    labels:
      controller-uid: 0259d137-ebef-4e1c-9bd0-896e1c9214f6
      job-name: mongodb-backup-1613779200
    name: mongodb-backup-1613779200-d8vks
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613779200
      uid: 0259d137-ebef-4e1c-9bd0-896e1c9214f6
    resourceVersion: "45481434"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613779200-d8vks
    uid: 95ce3040-5803-43f8-81f7-233d7bb69a45
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:26:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:21:57Z"
    generateName: mongodb-backup-1613779200-
    labels:
      controller-uid: 0259d137-ebef-4e1c-9bd0-896e1c9214f6
      job-name: mongodb-backup-1613779200
    name: mongodb-backup-1613779200-kzqnb
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613779200
      uid: 0259d137-ebef-4e1c-9bd0-896e1c9214f6
    resourceVersion: "68117277"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613779200-kzqnb
    uid: bcc11f33-11cc-494c-997d-caea59fe85fd
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:57Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:57Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:21:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:10Z"
    generateName: mongodb-backup-1613800800-
    labels:
      controller-uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
      job-name: mongodb-backup-1613800800
    name: mongodb-backup-1613800800-fxvb2
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613800800
      uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
    resourceVersion: "45484225"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613800800-fxvb2
    uid: a0239872-42bb-47f3-8537-28fa49ff33d3
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:26:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-11T06:28:22Z"
    generateName: mongodb-backup-1613800800-
    labels:
      controller-uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
      job-name: mongodb-backup-1613800800
    name: mongodb-backup-1613800800-g95pp
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613800800
      uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
    resourceVersion: "68127590"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613800800-g95pp
    uid: d633776f-f884-45a6-8029-b8f2fec53707
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-11T06:28:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:25Z"
    generateName: mongodb-backup-1613800800-
    labels:
      controller-uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
      job-name: mongodb-backup-1613800800
    name: mongodb-backup-1613800800-h468j
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613800800
      uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
    resourceVersion: "50868432"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613800800-h468j
    uid: e4aeba14-844e-4427-8d5c-c38c63a72831
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:12:12Z"
    generateName: mongodb-backup-1613800800-
    labels:
      controller-uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
      job-name: mongodb-backup-1613800800
    name: mongodb-backup-1613800800-p5vdc
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613800800
      uid: 77992fe8-a984-4d72-9baf-feb75c8a87bf
    resourceVersion: "68127602"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613800800-p5vdc
    uid: 4f73f192-81a2-4fe8-8552-bd0abac54881
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:12:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:36Z"
    generateName: mongodb-backup-1613822400-
    labels:
      controller-uid: ad99bfe5-3334-4ebe-97b2-8e50ce4710c1
      job-name: mongodb-backup-1613822400
    name: mongodb-backup-1613822400-jjpgf
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613822400
      uid: ad99bfe5-3334-4ebe-97b2-8e50ce4710c1
    resourceVersion: "68120342"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613822400-jjpgf
    uid: c9efdbda-bca7-4442-911c-745f13bd0cd1
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:36:35Z"
    generateName: mongodb-backup-1613822400-
    labels:
      controller-uid: ad99bfe5-3334-4ebe-97b2-8e50ce4710c1
      job-name: mongodb-backup-1613822400
    name: mongodb-backup-1613822400-mvc84
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613822400
      uid: ad99bfe5-3334-4ebe-97b2-8e50ce4710c1
    resourceVersion: "68120348"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613822400-mvc84
    uid: 14c6c54e-792a-4c28-8369-91a71729c008
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:35Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:35Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:36:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:13:26Z"
    generateName: mongodb-backup-1613844000-
    labels:
      controller-uid: bec4527d-9ba3-413d-8214-5545f8188f28
      job-name: mongodb-backup-1613844000
    name: mongodb-backup-1613844000-hjrtf
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613844000
      uid: bec4527d-9ba3-413d-8214-5545f8188f28
    resourceVersion: "68127840"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613844000-hjrtf
    uid: ffa7a2ce-7670-44fd-b198-d6e7356d06c0
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:13:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:13:26Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:13:26Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:13:26Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:13:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:28Z"
    generateName: mongodb-backup-1613844000-
    labels:
      controller-uid: bec4527d-9ba3-413d-8214-5545f8188f28
      job-name: mongodb-backup-1613844000
    name: mongodb-backup-1613844000-qpr26
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613844000
      uid: bec4527d-9ba3-413d-8214-5545f8188f28
    resourceVersion: "68127834"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613844000-qpr26
    uid: 56a7ef51-57dc-4433-9dde-edf49d5add84
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:11:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:11:23Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:11:23Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:11:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.159
    phase: Failed
    qosClass: BestEffort
    startTime: "2021-03-06T12:09:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:25Z"
    generateName: mongodb-backup-1613865600-
    labels:
      controller-uid: e99b8e87-2c9f-401c-891b-53e96723aeed
      job-name: mongodb-backup-1613865600
    name: mongodb-backup-1613865600-h6pcp
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613865600
      uid: e99b8e87-2c9f-401c-891b-53e96723aeed
    resourceVersion: "68117049"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613865600-h6pcp
    uid: 9cf9a40b-b547-4509-a4e4-d53a83500eec
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:21:08Z"
    generateName: mongodb-backup-1613865600-
    labels:
      controller-uid: e99b8e87-2c9f-401c-891b-53e96723aeed
      job-name: mongodb-backup-1613865600
    name: mongodb-backup-1613865600-qzfrk
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613865600
      uid: e99b8e87-2c9f-401c-891b-53e96723aeed
    resourceVersion: "68117055"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613865600-qzfrk
    uid: 68b5dac6-c0d4-4126-a52e-cf30ecc0b43b
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:08Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:08Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:21:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:36:42Z"
    generateName: mongodb-backup-1613887200-
    labels:
      controller-uid: 832de2de-0972-4457-afc5-3b5bfa68fda5
      job-name: mongodb-backup-1613887200
    name: mongodb-backup-1613887200-857zv
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613887200
      uid: 832de2de-0972-4457-afc5-3b5bfa68fda5
    resourceVersion: "68120389"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613887200-857zv
    uid: 8ea5197b-4aac-4745-8619-924ae3da233c
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:42Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:42Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:36:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:25Z"
    generateName: mongodb-backup-1613887200-
    labels:
      controller-uid: 832de2de-0972-4457-afc5-3b5bfa68fda5
      job-name: mongodb-backup-1613887200
    name: mongodb-backup-1613887200-b2kgc
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613887200
      uid: 832de2de-0972-4457-afc5-3b5bfa68fda5
    resourceVersion: "67107333"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613887200-b2kgc
    uid: 8797db18-700c-48dd-a712-bf02e7b68d3f
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-29T15:19:55Z"
    generateName: mongodb-backup-1613887200-
    labels:
      controller-uid: 832de2de-0972-4457-afc5-3b5bfa68fda5
      job-name: mongodb-backup-1613887200
    name: mongodb-backup-1613887200-k472k
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613887200
      uid: 832de2de-0972-4457-afc5-3b5bfa68fda5
    resourceVersion: "68120321"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613887200-k472k
    uid: 7db61e0b-6bde-40e8-aa4a-1dafee4c269e
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-29T15:19:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:11Z"
    generateName: mongodb-backup-1613908800-
    labels:
      controller-uid: a4c7573f-4943-4a93-9aa4-d4bbf4d2afcb
      job-name: mongodb-backup-1613908800
    name: mongodb-backup-1613908800-f5d75
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613908800
      uid: a4c7573f-4943-4a93-9aa4-d4bbf4d2afcb
    resourceVersion: "45481353"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613908800-f5d75
    uid: 7742d6da-ce94-4555-9f94-6998f8aa779f
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:26:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:18:17Z"
    generateName: mongodb-backup-1613908800-
    labels:
      controller-uid: a4c7573f-4943-4a93-9aa4-d4bbf4d2afcb
      job-name: mongodb-backup-1613908800
    name: mongodb-backup-1613908800-fgdcw
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613908800
      uid: a4c7573f-4943-4a93-9aa4-d4bbf4d2afcb
    resourceVersion: "68116548"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613908800-fgdcw
    uid: ac4383a0-32b8-43a7-9b09-f92cf317e334
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:14Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:14Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:19:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:25Z"
    generateName: mongodb-backup-1613908800-
    labels:
      controller-uid: a4c7573f-4943-4a93-9aa4-d4bbf4d2afcb
      job-name: mongodb-backup-1613908800
    name: mongodb-backup-1613908800-pj4tr
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613908800
      uid: a4c7573f-4943-4a93-9aa4-d4bbf4d2afcb
    resourceVersion: "68116228"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613908800-pj4tr
    uid: 31f7fcef-b931-4469-a36a-14121294fb3a
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:28Z"
    generateName: mongodb-backup-1613930400-
    labels:
      controller-uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
      job-name: mongodb-backup-1613930400
    name: mongodb-backup-1613930400-55zkg
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613930400
      uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
    resourceVersion: "45482479"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613930400-55zkg
    uid: 2c84f48d-99b3-4f5e-8d8f-aa9c2e6985f4
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:14:30Z"
    generateName: mongodb-backup-1613930400-
    labels:
      controller-uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
      job-name: mongodb-backup-1613930400
    name: mongodb-backup-1613930400-fzrb5
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613930400
      uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
    resourceVersion: "68128042"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613930400-fzrb5
    uid: b828c9b3-c9b3-4a72-a863-e25adf74f1b6
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:30Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:30Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:14:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T14:53:12Z"
    generateName: mongodb-backup-1613930400-
    labels:
      controller-uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
      job-name: mongodb-backup-1613930400
    name: mongodb-backup-1613930400-gxxz8
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613930400
      uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
    resourceVersion: "45534800"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613930400-gxxz8
    uid: fde61aeb-73a9-4dc9-b7cb-8aa37e807e08
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T14:53:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:27Z"
    generateName: mongodb-backup-1613930400-
    labels:
      controller-uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
      job-name: mongodb-backup-1613930400
    name: mongodb-backup-1613930400-wdqc9
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613930400
      uid: 091b1e01-c359-4c9c-bf72-eb16ba5327a3
    resourceVersion: "68128036"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613930400-wdqc9
    uid: 995f997f-ea08-469c-af8e-88b9271dab05
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T14:41:48Z"
    generateName: mongodb-backup-1613952000-
    labels:
      controller-uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
      job-name: mongodb-backup-1613952000
    name: mongodb-backup-1613952000-4vf74
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613952000
      uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
    resourceVersion: "45533150"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613952000-4vf74
    uid: 44affa2d-a75c-438c-a00e-7532677f4b1d
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T14:41:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-29T15:19:55Z"
    generateName: mongodb-backup-1613952000-
    labels:
      controller-uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
      job-name: mongodb-backup-1613952000
    name: mongodb-backup-1613952000-988kj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613952000
      uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
    resourceVersion: "68116881"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613952000-988kj
    uid: de78261f-c39b-4d2d-afa8-775fbb4e391a
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-29T15:19:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:20:39Z"
    generateName: mongodb-backup-1613952000-
    labels:
      controller-uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
      job-name: mongodb-backup-1613952000
    name: mongodb-backup-1613952000-fndn9
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613952000
      uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
    resourceVersion: "68116931"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613952000-fndn9
    uid: d68124fe-b1d5-4c5e-bbab-12cd06f7c647
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:39Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:39Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:20:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:19Z"
    generateName: mongodb-backup-1613952000-
    labels:
      controller-uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
      job-name: mongodb-backup-1613952000
    name: mongodb-backup-1613952000-tvjlw
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613952000
      uid: aa3b5f35-b90b-4ac7-a787-f29be01b4bf5
    resourceVersion: "67107514"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613952000-tvjlw
    uid: 4899eb5d-4bd3-4009-b038-5ccc50ab687e
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:25Z"
    generateName: mongodb-backup-1613973600-
    labels:
      controller-uid: 7d805bce-6fe5-4fa7-bfd1-677b0e450d97
      job-name: mongodb-backup-1613973600
    name: mongodb-backup-1613973600-229fx
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613973600
      uid: 7d805bce-6fe5-4fa7-bfd1-677b0e450d97
    resourceVersion: "68120246"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613973600-229fx
    uid: e37498fd-87e2-4632-9cce-87c6dc3abe0d
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:29Z"
    generateName: mongodb-backup-1613973600-
    labels:
      controller-uid: 7d805bce-6fe5-4fa7-bfd1-677b0e450d97
      job-name: mongodb-backup-1613973600
    name: mongodb-backup-1613973600-j5skr
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613973600
      uid: 7d805bce-6fe5-4fa7-bfd1-677b0e450d97
    resourceVersion: "45481635"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613973600-j5skr
    uid: bcfe5f5b-4be5-4bcd-9c4b-1b20d44c73b2
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:36:16Z"
    generateName: mongodb-backup-1613973600-
    labels:
      controller-uid: 7d805bce-6fe5-4fa7-bfd1-677b0e450d97
      job-name: mongodb-backup-1613973600
    name: mongodb-backup-1613973600-nz244
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613973600
      uid: 7d805bce-6fe5-4fa7-bfd1-677b0e450d97
    resourceVersion: "68120251"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613973600-nz244
    uid: f004d90a-9552-42cd-b76c-e253e481705d
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:16Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:16Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:36:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:36:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:33Z"
    generateName: mongodb-backup-1613995200-
    labels:
      controller-uid: a53a59af-dc71-4383-b35e-dfb453f354fc
      job-name: mongodb-backup-1613995200
    name: mongodb-backup-1613995200-hq972
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613995200
      uid: a53a59af-dc71-4383-b35e-dfb453f354fc
    resourceVersion: "68127589"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613995200-hq972
    uid: b06066c6-c0f6-436a-8612-9ab0d6f87ae8
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:12:12Z"
    generateName: mongodb-backup-1613995200-
    labels:
      controller-uid: a53a59af-dc71-4383-b35e-dfb453f354fc
      job-name: mongodb-backup-1613995200
    name: mongodb-backup-1613995200-lmcgq
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1613995200
      uid: a53a59af-dc71-4383-b35e-dfb453f354fc
    resourceVersion: "68127601"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1613995200-lmcgq
    uid: 7db1f3a6-25cf-430e-9bbe-63a55cc382d2
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:12:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:34Z"
    generateName: mongodb-backup-1614016800-
    labels:
      controller-uid: f4a6bace-c98b-4795-a431-5f7d36e802ed
      job-name: mongodb-backup-1614016800
    name: mongodb-backup-1614016800-2fhd4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614016800
      uid: f4a6bace-c98b-4795-a431-5f7d36e802ed
    resourceVersion: "68127983"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614016800-2fhd4
    uid: af870a80-fb4c-4b77-b530-d6df80360ed2
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:14:16Z"
    generateName: mongodb-backup-1614016800-
    labels:
      controller-uid: f4a6bace-c98b-4795-a431-5f7d36e802ed
      job-name: mongodb-backup-1614016800
    name: mongodb-backup-1614016800-cmxx9
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614016800
      uid: f4a6bace-c98b-4795-a431-5f7d36e802ed
    resourceVersion: "68127991"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614016800-cmxx9
    uid: 63ba9eb2-d16f-4082-82fe-487caaf9e2c0
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:16Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:16Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:14:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:14:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:34:21Z"
    generateName: mongodb-backup-1614038400-
    labels:
      controller-uid: 12f32240-51c7-486e-9a44-678b41011aba
      job-name: mongodb-backup-1614038400
    name: mongodb-backup-1614038400-5c8bn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614038400
      uid: 12f32240-51c7-486e-9a44-678b41011aba
    resourceVersion: "68119813"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614038400-5c8bn
    uid: eed05c47-5052-429c-a9e6-dde93046096d
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:21Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:21Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:34:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:31Z"
    generateName: mongodb-backup-1614038400-
    labels:
      controller-uid: 12f32240-51c7-486e-9a44-678b41011aba
      job-name: mongodb-backup-1614038400
    name: mongodb-backup-1614038400-wv4kj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614038400
      uid: 12f32240-51c7-486e-9a44-678b41011aba
    resourceVersion: "68119806"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614038400-wv4kj
    uid: 1a7828cf-decd-4ff9-869e-9da36f7aeaa4
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:33Z"
    generateName: mongodb-backup-1614060000-
    labels:
      controller-uid: af710279-506d-4fe6-9e7b-7983a6877c4d
      job-name: mongodb-backup-1614060000
    name: mongodb-backup-1614060000-h6ww6
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614060000
      uid: af710279-506d-4fe6-9e7b-7983a6877c4d
    resourceVersion: "68120754"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614060000-h6ww6
    uid: c1028096-8b2b-4157-bc95-38ef0f89dfe6
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:38:20Z"
    generateName: mongodb-backup-1614060000-
    labels:
      controller-uid: af710279-506d-4fe6-9e7b-7983a6877c4d
      job-name: mongodb-backup-1614060000
    name: mongodb-backup-1614060000-kd2fg
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614060000
      uid: af710279-506d-4fe6-9e7b-7983a6877c4d
    resourceVersion: "68120760"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614060000-kd2fg
    uid: 0d8f8aee-cedb-4ab5-9624-977421920870
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:20Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:20Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:38:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T12:00:00Z"
    generateName: mongodb-backup-1614081600-
    labels:
      controller-uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
      job-name: mongodb-backup-1614081600
    name: mongodb-backup-1614081600-225tz
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614081600
      uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
    resourceVersion: "45483886"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614081600-225tz
    uid: dcb12cf5-aca1-4205-bc43-2df97b548b69
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:11:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:30Z"
    generateName: mongodb-backup-1614081600-
    labels:
      controller-uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
      job-name: mongodb-backup-1614081600
    name: mongodb-backup-1614081600-7r4bd
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614081600
      uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
    resourceVersion: "50869184"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614081600-7r4bd
    uid: 4f9adbbe-b0f7-4cd0-8913-dace3c7bb276
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-11T06:28:22Z"
    generateName: mongodb-backup-1614081600-
    labels:
      controller-uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
      job-name: mongodb-backup-1614081600
    name: mongodb-backup-1614081600-cqbkm
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614081600
      uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
    resourceVersion: "68120885"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614081600-cqbkm
    uid: b3966252-cd1b-4857-a6db-b1fc666ff272
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-11T06:28:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T14:35:16Z"
    generateName: mongodb-backup-1614081600-
    labels:
      controller-uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
      job-name: mongodb-backup-1614081600
    name: mongodb-backup-1614081600-fvsrd
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614081600
      uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
    resourceVersion: "45534396"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614081600-fvsrd
    uid: b1e4bbf4-6cd8-4428-b400-f01c862c5692
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T14:35:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:38:51Z"
    generateName: mongodb-backup-1614081600-
    labels:
      controller-uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
      job-name: mongodb-backup-1614081600
    name: mongodb-backup-1614081600-rfjp2
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mongodb-backup-1614081600
      uid: 1434f90e-1610-4fba-8dca-3a16061a6e4e
    resourceVersion: "68120891"
    selfLink: /api/v1/namespaces/dataworks/pods/mongodb-backup-1614081600-rfjp2
    uid: 46bebe47-6dcb-484b-a222-5509e3dba3c2
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M") && mongodump -h mongodb:27017  -o
        /mongobackup/mongo-$(date +"%m-%d-%Y-%H-%M")
      command:
      - /bin/sh
      image: mongo
      imagePullPolicy: Always
      name: mongodb-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /mongobackup
        name: mongodb-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: mongodb-backup
      persistentVolumeClaim:
        claimName: mongodb-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:51Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:51Z"
      message: 'containers with unready status: [mongodb-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: mongo
      imageID: ""
      lastState: {}
      name: mongodb-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:38:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-11T09:28:37Z"
    generateName: nginx-gateway-6b65797bc9-
    labels:
      app: nginx-gateway
      pod-template-hash: 6b65797bc9
    name: nginx-gateway-6b65797bc9-mh4v4
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-gateway-6b65797bc9
      uid: 8bc419f3-246b-4837-ad70-4abac945542e
    resourceVersion: "71062840"
    selfLink: /api/v1/namespaces/dataworks/pods/nginx-gateway-6b65797bc9-mh4v4
    uid: 47fbdc87-d068-45c9-afcd-68cb126d4a20
  spec:
    containers:
    - image: dwproductionus.azurecr.io/nginx-gateway:v1.0.24
      imagePullPolicy: IfNotPresent
      name: nginx-gateway
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-11T09:28:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-11T09:28:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-11T09:28:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-11T09:28:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8168b628718f9f9b8fee18cc60c2a5b186e317995c577c603646f73ab0395584
      image: dwproductionus.azurecr.io/nginx-gateway:v1.0.20
      imageID: docker-pullable://dwproductionus.azurecr.io/nginx-gateway@sha256:f341851dcaa32f33bac51ac47dd385574bb52768c5fac40841fdccfd8b0bd594
      lastState: {}
      name: nginx-gateway
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-05-11T09:28:39Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.236
    podIPs:
    - ip: 10.240.0.236
    qosClass: BestEffort
    startTime: "2021-05-11T09:28:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-10T06:11:44Z"
    generateName: notification-service-
    labels:
      app: notification-service
      controller-revision-hash: notification-service-9b5fc5796
      statefulset.kubernetes.io/pod-name: notification-service-0
      tier: dataworks
    name: notification-service-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: notification-service
      uid: 9ff512bb-b690-4ea6-a969-03646f49a948
    resourceVersion: "64621051"
    selfLink: /api/v1/namespaces/dataworks/pods/notification-service-0
    uid: 0092bdaf-6b9e-4511-894c-fb1b88a3f553
  spec:
    containers:
    - env:
      - name: PORT
        value: "1323"
      - name: POSTGRES_USER
        value: postgres
      - name: POSTGRES_PASSWORD
        value: postgres
      - name: POSTGRES_HOST
        value: postgres
      - name: POSTGRES_DB
        value: dataworks
      - name: POSTGRES_PORT
        value: "5432"
      image: dwproductionus.azurecr.io/notification-service:1.0.9
      imagePullPolicy: Always
      name: notification-service
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: notification-service-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: notification-service
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-03-10T06:11:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:22:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:22:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-03-10T06:11:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5e388d95d54383c7e0b61eea8a1c3c4af9525b246c837b0560329489efb03d6f
      image: dwproductionus.azurecr.io/notification-service:1.0.9
      imageID: docker-pullable://dwproductionus.azurecr.io/notification-service@sha256:05280cb8eb881910034ca768ef0ed12802a58ee58da0b0debcd8123f89b25bbc
      lastState:
        terminated:
          containerID: docker://21197a677dc637460bb348ff94aa5e7589849fa7789a427945bef1f3e597f392
          exitCode: 1
          finishedAt: "2021-04-21T20:22:02Z"
          reason: Error
          startedAt: "2021-04-21T20:21:47Z"
      name: notification-service
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:22:31Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.253
    podIPs:
    - ip: 10.240.0.253
    qosClass: BestEffort
    startTime: "2021-03-10T06:11:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-17T15:47:11Z"
    generateName: outputfactory-57968c4c9-
    labels:
      app: outputfactory
      pod-template-hash: 57968c4c9
      tier: dataworks
    name: outputfactory-57968c4c9-csd8d
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: outputfactory-57968c4c9
      uid: c69045e8-0164-4741-b975-3dc42a414b64
    resourceVersion: "83805638"
    selfLink: /api/v1/namespaces/dataworks/pods/outputfactory-57968c4c9-csd8d
    uid: 6095bc8c-1a09-4d8b-a39d-90858be82b9f
  spec:
    containers:
    - env:
      - name: OUTPUT_STORAGE
        value: /data/csv
      - name: PORT
        value: "3003"
      - name: AZURE_STORAGE_ACCOUNT
        value: dwlake
      - name: AZURE_STORAGE_ACCESS_KEY
        value: gpGyht8mnaNMRixoJSa50DZH1X9OQuBHLurnWfJeM3FkF5eXcd5az/pTubIkJn3FBQfXts0FOKzJaTtSs17fmQ==
      - name: REDIS_HOST
        value: redis
      - name: REDIS_PORT
        value: "80"
      image: dwproductionus.azurecr.io/outputfactory:v1.48.16
      imagePullPolicy: Always
      name: outputfactory
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:47:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:47:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:47:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-17T15:47:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8f2ccb88662e8abfc9a2b1cc31a48f1a2187ab77360e446f624df4259555d917
      image: dwproductionus.azurecr.io/outputfactory:v1.48.16
      imageID: docker-pullable://dwproductionus.azurecr.io/outputfactory@sha256:321ad72562138e655163d06149f137d2edca73e9d0d52fecbdf8c661cc4f537a
      lastState: {}
      name: outputfactory
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-17T15:47:14Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.254
    podIPs:
    - ip: 10.240.0.254
    qosClass: BestEffort
    startTime: "2021-06-17T15:47:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:25Z"
    generateName: postgres-
    labels:
      app: postgres
      controller-revision-hash: postgres-6cdb479668
      statefulset.kubernetes.io/pod-name: postgres-0
      tier: dataworks
    name: postgres-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: postgres
      uid: c8eb0d4c-6685-4933-9ec5-19b89be92887
    resourceVersion: "68134427"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-0
    uid: 150e08bd-a33e-4d81-8b6f-33a83ec8387d
  spec:
    containers:
    - env:
      - name: POSTGRES_USER
        value: postgres
      - name: POSTGRES_HOST
        value: postgres
      - name: POSTGRES_DB
        value: dataworks
      - name: POSTGRES_PASSWORD
        value: postgres
      - name: PGDATA
        value: /var/lib/postgresql/data/pgdata
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - sh
          - -c
          - exec pg_isready -U postgres
        failureThreshold: 6
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: postgres
      ports:
      - containerPort: 5432
        name: postgres
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - sh
          - -c
          - exec pg_isready -U postgres
        failureThreshold: 3
        initialDelaySeconds: 50
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: postgres-data-disk
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: postgres-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: postgres
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureDisk:
        cachingMode: ReadWrite
        diskName: postgres-pvc
        diskURI: /subscriptions/984ada39-0a0c-43d9-b0e2-1a029e17130a/resourceGroups/MC_DWProductionUS_DWProdUS_centralus/providers/Microsoft.Compute/disks/postgres-pvc
        fsType: ext4
        kind: Managed
        readOnly: false
      name: postgres-data-disk
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:48:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:48:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:25Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0b7c34375be2a7405cbf74236f4b24216e5512f300dbd33e92bca272cccf9a46
      image: postgres:11.8-alpine
      imageID: docker-pullable://postgres@sha256:fed26d3b33ed6c29437d1afaf483a60bf39c10f878e7ae5662436862e743e3b0
      lastState:
        terminated:
          containerID: docker://cd625ec1f5e33ee240375bd70a8d28f5686ba503c526f37f3a4055d0bba3dede
          exitCode: 0
          finishedAt: "2021-05-02T19:47:28Z"
          reason: Completed
          startedAt: "2021-05-02T19:42:35Z"
      name: postgres
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2021-05-02T19:47:38Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.229
    podIPs:
    - ip: 10.240.0.229
    qosClass: Burstable
    startTime: "2021-02-23T13:26:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:28Z"
    generateName: postgres-backup-1613692800-
    labels:
      controller-uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
      job-name: postgres-backup-1613692800
    name: postgres-backup-1613692800-7ntnx
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613692800
      uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
    resourceVersion: "45481656"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613692800-7ntnx
    uid: 78392822-c0e6-4eb3-8f1c-c93e0ca5b3af
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:27Z"
    generateName: postgres-backup-1613692800-
    labels:
      controller-uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
      job-name: postgres-backup-1613692800
    name: postgres-backup-1613692800-g9hbd
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613692800
      uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
    resourceVersion: "68116702"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613692800-g9hbd
    uid: e8f33e98-1ff9-424f-b942-b07b497a9b44
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:19:51Z"
    generateName: postgres-backup-1613692800-
    labels:
      controller-uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
      job-name: postgres-backup-1613692800
    name: postgres-backup-1613692800-m9gdl
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613692800
      uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
    resourceVersion: "68116709"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613692800-m9gdl
    uid: f780ee11-a365-4baa-9f1e-7759e3da9a0c
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:52Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:52Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:19:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T15:25:08Z"
    generateName: postgres-backup-1613692800-
    labels:
      controller-uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
      job-name: postgres-backup-1613692800
    name: postgres-backup-1613692800-s8t4r
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613692800
      uid: be15c749-ddf5-4c65-b20d-5ade1fa73776
    resourceVersion: "45533767"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613692800-s8t4r
    uid: 6e9caf8a-752c-48e1-ad9d-f05afd18605e
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T15:25:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:30Z"
    generateName: postgres-backup-1613714400-
    labels:
      controller-uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
      job-name: postgres-backup-1613714400
    name: postgres-backup-1613714400-55nj6
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613714400
      uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
    resourceVersion: "45483812"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613714400-55nj6
    uid: c88f8d44-27a3-4e95-8a9e-d648b478e66c
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:19Z"
    generateName: postgres-backup-1613714400-
    labels:
      controller-uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
      job-name: postgres-backup-1613714400
    name: postgres-backup-1613714400-74xg5
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613714400
      uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
    resourceVersion: "50869261"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613714400-74xg5
    uid: 98997d49-d070-4651-a607-7b666028c3e9
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:17:03Z"
    generateName: postgres-backup-1613714400-
    labels:
      controller-uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
      job-name: postgres-backup-1613714400
    name: postgres-backup-1613714400-pr7lt
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613714400
      uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
    resourceVersion: "68116544"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613714400-pr7lt
    uid: b8cbe17e-d3c7-43e9-9149-8314f49a4326
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:13Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:13Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:19:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-11T06:28:22Z"
    generateName: postgres-backup-1613714400-
    labels:
      controller-uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
      job-name: postgres-backup-1613714400
    name: postgres-backup-1613714400-zr7kd
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613714400
      uid: 7e4128b9-2b90-42c1-a78a-fa538426fd38
    resourceVersion: "68115938"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613714400-zr7kd
    uid: 6f137fac-d403-443f-b052-ec91afeb50ff
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-11T06:28:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:38:49Z"
    generateName: postgres-backup-1613736000-
    labels:
      controller-uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
      job-name: postgres-backup-1613736000
    name: postgres-backup-1613736000-4sjrb
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613736000
      uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
    resourceVersion: "68120867"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613736000-4sjrb
    uid: 123c017a-ae95-4543-bf16-c5e6d6030be9
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:38:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:30Z"
    generateName: postgres-backup-1613736000-
    labels:
      controller-uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
      job-name: postgres-backup-1613736000
    name: postgres-backup-1613736000-b4rp2
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613736000
      uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
    resourceVersion: "45483846"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613736000-b4rp2
    uid: 352a1e00-3929-4a24-8058-0eb2b288c64b
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-11T06:28:22Z"
    generateName: postgres-backup-1613736000-
    labels:
      controller-uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
      job-name: postgres-backup-1613736000
    name: postgres-backup-1613736000-mmm6k
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613736000
      uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
    resourceVersion: "68120855"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613736000-mmm6k
    uid: 5113c2bd-ce73-4bf2-8251-31b8a31dc907
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-11T06:28:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:20Z"
    generateName: postgres-backup-1613736000-
    labels:
      controller-uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
      job-name: postgres-backup-1613736000
    name: postgres-backup-1613736000-r4vt4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613736000
      uid: 65e731e3-ec16-44a1-95bb-fb2baa2f14e5
    resourceVersion: "50868695"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613736000-r4vt4
    uid: 185dd682-3218-42e2-9ded-d0cbe16cde6d
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:25:53Z"
    generateName: postgres-backup-1613757600-
    labels:
      controller-uid: ba21af30-f03e-48e6-bdda-1b09f375eb42
      job-name: postgres-backup-1613757600
    name: postgres-backup-1613757600-fbzj5
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613757600
      uid: ba21af30-f03e-48e6-bdda-1b09f375eb42
    resourceVersion: "68130135"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613757600-fbzj5
    uid: c644373a-9521-4a57-95ed-5975124307ff
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:25:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:25:53Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:25:53Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:25:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:25:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:29Z"
    generateName: postgres-backup-1613757600-
    labels:
      controller-uid: ba21af30-f03e-48e6-bdda-1b09f375eb42
      job-name: postgres-backup-1613757600
    name: postgres-backup-1613757600-fxt29
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613757600
      uid: ba21af30-f03e-48e6-bdda-1b09f375eb42
    resourceVersion: "68130129"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613757600-fxt29
    uid: 6a1271c4-26c0-4934-ad33-8eeb7a4f28f2
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T15:02:12Z"
    generateName: postgres-backup-1613757600-
    labels:
      controller-uid: ba21af30-f03e-48e6-bdda-1b09f375eb42
      job-name: postgres-backup-1613757600
    name: postgres-backup-1613757600-vjbrj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613757600
      uid: ba21af30-f03e-48e6-bdda-1b09f375eb42
    resourceVersion: "45533176"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613757600-vjbrj
    uid: 0adf6b9d-2552-47a5-b996-35a244f22577
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T15:02:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:34Z"
    generateName: postgres-backup-1613779200-
    labels:
      controller-uid: 8e220a92-1ba9-456a-bdfc-7591d065ef7f
      job-name: postgres-backup-1613779200
    name: postgres-backup-1613779200-5m9zx
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613779200
      uid: 8e220a92-1ba9-456a-bdfc-7591d065ef7f
    resourceVersion: "68129859"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613779200-5m9zx
    uid: 7df62b66-e4f3-4a8f-a10d-65295f67efd2
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:24:31Z"
    generateName: postgres-backup-1613779200-
    labels:
      controller-uid: 8e220a92-1ba9-456a-bdfc-7591d065ef7f
      job-name: postgres-backup-1613779200
    name: postgres-backup-1613779200-hwnzn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613779200
      uid: 8e220a92-1ba9-456a-bdfc-7591d065ef7f
    resourceVersion: "68129865"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613779200-hwnzn
    uid: 03a9a68d-73c2-4cb1-8b3a-ff46f6eff155
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:31Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:31Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:24:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T15:40:45Z"
    generateName: postgres-backup-1613779200-
    labels:
      controller-uid: 8e220a92-1ba9-456a-bdfc-7591d065ef7f
      job-name: postgres-backup-1613779200
    name: postgres-backup-1613779200-rdfdh
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613779200
      uid: 8e220a92-1ba9-456a-bdfc-7591d065ef7f
    resourceVersion: "45532574"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613779200-rdfdh
    uid: b03b3f19-56e6-4a2b-90d7-c65b28ca8b00
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T15:40:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:12Z"
    generateName: postgres-backup-1613800800-
    labels:
      controller-uid: 162e709f-bc4c-4caf-8858-2767343d9a25
      job-name: postgres-backup-1613800800
    name: postgres-backup-1613800800-2xhln
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613800800
      uid: 162e709f-bc4c-4caf-8858-2767343d9a25
    resourceVersion: "45484855"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613800800-2xhln
    uid: b1c14b45-23c4-443d-a469-8c87e02a616c
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:26:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:25Z"
    generateName: postgres-backup-1613800800-
    labels:
      controller-uid: 162e709f-bc4c-4caf-8858-2767343d9a25
      job-name: postgres-backup-1613800800
    name: postgres-backup-1613800800-5kklj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613800800
      uid: 162e709f-bc4c-4caf-8858-2767343d9a25
    resourceVersion: "68116262"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613800800-5kklj
    uid: 65673dc1-31bd-478a-9c07-b8e28fc7a9c7
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:46:19Z"
    generateName: postgres-backup-1613800800-
    labels:
      controller-uid: 162e709f-bc4c-4caf-8858-2767343d9a25
      job-name: postgres-backup-1613800800
    name: postgres-backup-1613800800-99bkl
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613800800
      uid: 162e709f-bc4c-4caf-8858-2767343d9a25
    resourceVersion: "45533445"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613800800-99bkl
    uid: 57df6f39-c6b3-4299-b308-95f004374a3e
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:46:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:18:25Z"
    generateName: postgres-backup-1613800800-
    labels:
      controller-uid: 162e709f-bc4c-4caf-8858-2767343d9a25
      job-name: postgres-backup-1613800800
    name: postgres-backup-1613800800-xjfhr
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613800800
      uid: 162e709f-bc4c-4caf-8858-2767343d9a25
    resourceVersion: "68116489"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613800800-xjfhr
    uid: 6a726bca-2108-4d0c-8e47-7c5de0d949e0
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:03Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:03Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:19:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:44:39Z"
    generateName: postgres-backup-1613822400-
    labels:
      controller-uid: ccdd9b18-433a-4ef7-bcbe-e37cf689c71c
      job-name: postgres-backup-1613822400
    name: postgres-backup-1613822400-574ww
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613822400
      uid: ccdd9b18-433a-4ef7-bcbe-e37cf689c71c
    resourceVersion: "68133644"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613822400-574ww
    uid: 2a7c5b2c-786b-49f1-89a9-e4c478e4791e
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:44:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:44:39Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:44:39Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:44:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:44:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:26Z"
    generateName: postgres-backup-1613822400-
    labels:
      controller-uid: ccdd9b18-433a-4ef7-bcbe-e37cf689c71c
      job-name: postgres-backup-1613822400
    name: postgres-backup-1613822400-klmw5
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613822400
      uid: ccdd9b18-433a-4ef7-bcbe-e37cf689c71c
    resourceVersion: "68133638"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613822400-klmw5
    uid: cd1f3e3e-0022-4979-99cc-79a9de549252
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T14:35:04Z"
    generateName: postgres-backup-1613822400-
    labels:
      controller-uid: ccdd9b18-433a-4ef7-bcbe-e37cf689c71c
      job-name: postgres-backup-1613822400
    name: postgres-backup-1613822400-s8v6f
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613822400
      uid: ccdd9b18-433a-4ef7-bcbe-e37cf689c71c
    resourceVersion: "45532579"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613822400-s8v6f
    uid: 30e25ec0-e028-4bae-a49b-c2572b6bef86
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T14:35:04Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:20:20Z"
    generateName: postgres-backup-1613844000-
    labels:
      controller-uid: 8e48a0e9-c430-42be-af5e-bc21e63d572f
      job-name: postgres-backup-1613844000
    name: postgres-backup-1613844000-2fjnt
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613844000
      uid: 8e48a0e9-c430-42be-af5e-bc21e63d572f
    resourceVersion: "68116838"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613844000-2fjnt
    uid: e4a5daa0-b03d-4342-85d2-0babcfd94a3e
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:21Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:21Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:20:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:20:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:24Z"
    generateName: postgres-backup-1613844000-
    labels:
      controller-uid: 8e48a0e9-c430-42be-af5e-bc21e63d572f
      job-name: postgres-backup-1613844000
    name: postgres-backup-1613844000-8bh9r
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613844000
      uid: 8e48a0e9-c430-42be-af5e-bc21e63d572f
    resourceVersion: "68116828"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613844000-8bh9r
    uid: c9599ad0-4a06-416f-9250-d93d82683565
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T16:39:30Z"
    generateName: postgres-backup-1613844000-
    labels:
      controller-uid: 8e48a0e9-c430-42be-af5e-bc21e63d572f
      job-name: postgres-backup-1613844000
    name: postgres-backup-1613844000-zp7hk
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613844000
      uid: 8e48a0e9-c430-42be-af5e-bc21e63d572f
    resourceVersion: "45534802"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613844000-zp7hk
    uid: de246c38-993b-44a4-9030-22d7a75112f9
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T16:39:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:30Z"
    generateName: postgres-backup-1613865600-
    labels:
      controller-uid: 796a0512-d450-4764-ad59-c7d6a16aea72
      job-name: postgres-backup-1613865600
    name: postgres-backup-1613865600-bpfrn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613865600
      uid: 796a0512-d450-4764-ad59-c7d6a16aea72
    resourceVersion: "68117409"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613865600-bpfrn
    uid: 5d0932be-2e30-4fba-adcc-628762a8c50d
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:22:30Z"
    generateName: postgres-backup-1613865600-
    labels:
      controller-uid: 796a0512-d450-4764-ad59-c7d6a16aea72
      job-name: postgres-backup-1613865600
    name: postgres-backup-1613865600-zvdn4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613865600
      uid: 796a0512-d450-4764-ad59-c7d6a16aea72
    resourceVersion: "68117415"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613865600-zvdn4
    uid: ee56083f-b4ef-4ce7-b2bc-2640b1f26d0f
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:30Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:30Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:22:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:34Z"
    generateName: postgres-backup-1613887200-
    labels:
      controller-uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
      job-name: postgres-backup-1613887200
    name: postgres-backup-1613887200-27gp8
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613887200
      uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
    resourceVersion: "68117471"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613887200-27gp8
    uid: 423e173d-2df3-4545-81d7-702602640b15
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:22:43Z"
    generateName: postgres-backup-1613887200-
    labels:
      controller-uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
      job-name: postgres-backup-1613887200
    name: postgres-backup-1613887200-fxz6t
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613887200
      uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
    resourceVersion: "68117477"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613887200-fxz6t
    uid: 9e44e639-1256-4a5f-b09c-e5fae1bdafdf
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:43Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:43Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:22:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:22:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T16:56:34Z"
    generateName: postgres-backup-1613887200-
    labels:
      controller-uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
      job-name: postgres-backup-1613887200
    name: postgres-backup-1613887200-g7b87
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613887200
      uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
    resourceVersion: "45537650"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613887200-g7b87
    uid: 2347c81a-d124-4f6f-86f3-c8fe1b56809c
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T16:56:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T15:14:23Z"
    generateName: postgres-backup-1613887200-
    labels:
      controller-uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
      job-name: postgres-backup-1613887200
    name: postgres-backup-1613887200-mqpnw
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613887200
      uid: ddbd3db5-b3eb-4f65-b5ad-643c8754731b
    resourceVersion: "45534517"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613887200-mqpnw
    uid: bfa758ea-3c99-48c4-9915-58fbea392050
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T15:14:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:20Z"
    generateName: postgres-backup-1613908800-
    labels:
      controller-uid: 9b25a0c4-4e4b-471e-a88c-c76b373eda7e
      job-name: postgres-backup-1613908800
    name: postgres-backup-1613908800-58wvn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613908800
      uid: 9b25a0c4-4e4b-471e-a88c-c76b373eda7e
    resourceVersion: "67108790"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613908800-58wvn
    uid: f602edc8-8ece-4461-8668-c333a96df320
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:34:32Z"
    generateName: postgres-backup-1613908800-
    labels:
      controller-uid: 9b25a0c4-4e4b-471e-a88c-c76b373eda7e
      job-name: postgres-backup-1613908800
    name: postgres-backup-1613908800-ck9qf
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613908800
      uid: 9b25a0c4-4e4b-471e-a88c-c76b373eda7e
    resourceVersion: "68131789"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613908800-ck9qf
    uid: 1427c8cc-d876-4e8d-a1bc-85536a31fa4a
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:34:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:34:32Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:34:32Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:34:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:34:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-29T15:19:55Z"
    generateName: postgres-backup-1613908800-
    labels:
      controller-uid: 9b25a0c4-4e4b-471e-a88c-c76b373eda7e
      job-name: postgres-backup-1613908800
    name: postgres-backup-1613908800-nkwp2
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613908800
      uid: 9b25a0c4-4e4b-471e-a88c-c76b373eda7e
    resourceVersion: "68131747"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613908800-nkwp2
    uid: ec559a3e-235b-49eb-904b-e14673c25168
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-29T15:19:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-11T06:28:22Z"
    generateName: postgres-backup-1613930400-
    labels:
      controller-uid: 2e735040-8742-4941-99f4-2858466adddf
      job-name: postgres-backup-1613930400
    name: postgres-backup-1613930400-226nj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613930400
      uid: 2e735040-8742-4941-99f4-2858466adddf
    resourceVersion: "68117585"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613930400-226nj
    uid: 7cf0d52a-55e3-4811-8a50-29003119078b
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-11T06:28:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:23:14Z"
    generateName: postgres-backup-1613930400-
    labels:
      controller-uid: 2e735040-8742-4941-99f4-2858466adddf
      job-name: postgres-backup-1613930400
    name: postgres-backup-1613930400-c5hws
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613930400
      uid: 2e735040-8742-4941-99f4-2858466adddf
    resourceVersion: "68117590"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613930400-c5hws
    uid: 64eec691-e6db-4b9d-bf2d-d2755086c754
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:23:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:23:14Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:23:14Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:23:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:23:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:31Z"
    generateName: postgres-backup-1613930400-
    labels:
      controller-uid: 2e735040-8742-4941-99f4-2858466adddf
      job-name: postgres-backup-1613930400
    name: postgres-backup-1613930400-d6rsn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613930400
      uid: 2e735040-8742-4941-99f4-2858466adddf
    resourceVersion: "50868722"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613930400-d6rsn
    uid: 8b11bbaa-8462-4ce9-ae15-0399f9c3fa67
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:13Z"
    generateName: postgres-backup-1613930400-
    labels:
      controller-uid: 2e735040-8742-4941-99f4-2858466adddf
      job-name: postgres-backup-1613930400
    name: postgres-backup-1613930400-j5ks6
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613930400
      uid: 2e735040-8742-4941-99f4-2858466adddf
    resourceVersion: "45484467"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613930400-j5ks6
    uid: 356d266f-e6a8-4de6-88fe-8b7b80d83470
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:26:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:21Z"
    generateName: postgres-backup-1613952000-
    labels:
      controller-uid: 40d1eee3-ddfe-4428-bad6-21be05879404
      job-name: postgres-backup-1613952000
    name: postgres-backup-1613952000-2jn6j
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613952000
      uid: 40d1eee3-ddfe-4428-bad6-21be05879404
    resourceVersion: "50868653"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613952000-2jn6j
    uid: 754bef41-c3db-4450-b46c-a3df98ccb153
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:27Z"
    generateName: postgres-backup-1613952000-
    labels:
      controller-uid: 40d1eee3-ddfe-4428-bad6-21be05879404
      job-name: postgres-backup-1613952000
    name: postgres-backup-1613952000-6fbsh
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613952000
      uid: 40d1eee3-ddfe-4428-bad6-21be05879404
    resourceVersion: "45483199"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613952000-6fbsh
    uid: c9facc70-6181-46c2-9072-9869bc13413a
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-11T06:28:22Z"
    generateName: postgres-backup-1613952000-
    labels:
      controller-uid: 40d1eee3-ddfe-4428-bad6-21be05879404
      job-name: postgres-backup-1613952000
    name: postgres-backup-1613952000-9h7kj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613952000
      uid: 40d1eee3-ddfe-4428-bad6-21be05879404
    resourceVersion: "68120857"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613952000-9h7kj
    uid: e201ad0b-dd5f-457c-b111-2a71301ba317
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-11T06:28:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:38:49Z"
    generateName: postgres-backup-1613952000-
    labels:
      controller-uid: 40d1eee3-ddfe-4428-bad6-21be05879404
      job-name: postgres-backup-1613952000
    name: postgres-backup-1613952000-fpgkj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613952000
      uid: 40d1eee3-ddfe-4428-bad6-21be05879404
    resourceVersion: "68120868"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613952000-fpgkj
    uid: afc2c293-7046-41ee-b70d-949f60c0c046
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:38:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:38:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-29T15:19:55Z"
    generateName: postgres-backup-1613973600-
    labels:
      controller-uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
      job-name: postgres-backup-1613973600
    name: postgres-backup-1613973600-l747t
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613973600
      uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
    resourceVersion: "68129858"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613973600-l747t
    uid: b31f91f8-863a-4890-ab1f-f81ada8ec1e1
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-29T15:19:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:31Z"
    generateName: postgres-backup-1613973600-
    labels:
      controller-uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
      job-name: postgres-backup-1613973600
    name: postgres-backup-1613973600-qq55f
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613973600
      uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
    resourceVersion: "45483193"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613973600-qq55f
    uid: 16310522-0cc7-48c0-bf60-6f7b731cdc5b
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:24:41Z"
    generateName: postgres-backup-1613973600-
    labels:
      controller-uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
      job-name: postgres-backup-1613973600
    name: postgres-backup-1613973600-swplr
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613973600
      uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
    resourceVersion: "68129911"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613973600-swplr
    uid: be0818fc-55cb-4eaf-a2f8-3b23a3dc7542
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:41Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:41Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:24:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:24:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:26Z"
    generateName: postgres-backup-1613973600-
    labels:
      controller-uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
      job-name: postgres-backup-1613973600
    name: postgres-backup-1613973600-v4vbl
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613973600
      uid: 5372c0f0-3624-4f19-8612-53ee5876bee1
    resourceVersion: "67108933"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613973600-v4vbl
    uid: 95db5d88-db07-4d3d-9585-1c21181eeda5
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:30Z"
    generateName: postgres-backup-1613995200-
    labels:
      controller-uid: 60c72016-c114-4154-bffa-11425e89b44e
      job-name: postgres-backup-1613995200
    name: postgres-backup-1613995200-7xg7q
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613995200
      uid: 60c72016-c114-4154-bffa-11425e89b44e
    resourceVersion: "68117098"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613995200-7xg7q
    uid: 99e7c42e-2736-41f8-a05f-f5958d707d21
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T14:57:36Z"
    generateName: postgres-backup-1613995200-
    labels:
      controller-uid: 60c72016-c114-4154-bffa-11425e89b44e
      job-name: postgres-backup-1613995200
    name: postgres-backup-1613995200-94zdv
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613995200
      uid: 60c72016-c114-4154-bffa-11425e89b44e
    resourceVersion: "45533772"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613995200-94zdv
    uid: 4f57e255-8c49-4ccd-b5bb-0421a1984901
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T14:57:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:21:17Z"
    generateName: postgres-backup-1613995200-
    labels:
      controller-uid: 60c72016-c114-4154-bffa-11425e89b44e
      job-name: postgres-backup-1613995200
    name: postgres-backup-1613995200-kql47
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613995200
      uid: 60c72016-c114-4154-bffa-11425e89b44e
    resourceVersion: "68117104"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613995200-kql47
    uid: 9416b375-2913-4735-a5f8-3d93c62a4328
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:17Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:17Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:21:17Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:21:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T16:58:04Z"
    generateName: postgres-backup-1613995200-
    labels:
      controller-uid: 60c72016-c114-4154-bffa-11425e89b44e
      job-name: postgres-backup-1613995200
    name: postgres-backup-1613995200-p5m28
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1613995200
      uid: 60c72016-c114-4154-bffa-11425e89b44e
    resourceVersion: "45537479"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1613995200-p5m28
    uid: cbea9f9b-c44b-4f39-b21d-d12b10a57a21
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T16:58:04Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:28Z"
    generateName: postgres-backup-1614016800-
    labels:
      controller-uid: a080f9f6-c753-4e04-ad4f-f52220d44d65
      job-name: postgres-backup-1614016800
    name: postgres-backup-1614016800-2khz8
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614016800
      uid: a080f9f6-c753-4e04-ad4f-f52220d44d65
    resourceVersion: "58853031"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614016800-2khz8
    uid: 117dd701-ad17-4cc6-9ccf-e0bd529a9093
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:36:26Z"
    generateName: postgres-backup-1614016800-
    labels:
      controller-uid: a080f9f6-c753-4e04-ad4f-f52220d44d65
      job-name: postgres-backup-1614016800
    name: postgres-backup-1614016800-gknmh
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614016800
      uid: a080f9f6-c753-4e04-ad4f-f52220d44d65
    resourceVersion: "68132154"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614016800-gknmh
    uid: 0d0b6d12-d3a2-4838-83e0-236d8d33e9a9
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:36:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:36:26Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:36:26Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:36:26Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:36:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-04T10:13:42Z"
    generateName: postgres-backup-1614016800-
    labels:
      controller-uid: a080f9f6-c753-4e04-ad4f-f52220d44d65
      job-name: postgres-backup-1614016800
    name: postgres-backup-1614016800-v8hsg
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614016800
      uid: a080f9f6-c753-4e04-ad4f-f52220d44d65
    resourceVersion: "68132148"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614016800-v8hsg
    uid: 7b3a09dd-6fe9-4d89-b7cc-83857a7043cf
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-04T10:13:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:13:28Z"
    generateName: postgres-backup-1614038400-
    labels:
      controller-uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
      job-name: postgres-backup-1614038400
    name: postgres-backup-1614038400-d8kdw
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614038400
      uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
    resourceVersion: "45484478"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614038400-d8kdw
    uid: dd690e19-e498-40fa-95de-ca8a3b2fd534
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:13:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-04T10:13:42Z"
    generateName: postgres-backup-1614038400-
    labels:
      controller-uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
      job-name: postgres-backup-1614038400
    name: postgres-backup-1614038400-dlznb
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614038400
      uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
    resourceVersion: "68119782"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614038400-dlznb
    uid: 27d77c02-03f8-4b55-8571-6f8be52f9088
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-04T10:13:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:34:18Z"
    generateName: postgres-backup-1614038400-
    labels:
      controller-uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
      job-name: postgres-backup-1614038400
    name: postgres-backup-1614038400-hdsf4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614038400
      uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
    resourceVersion: "68119788"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614038400-hdsf4
    uid: 43116c81-444a-40ea-924c-05b9cff73dcc
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:34:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:34:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:24Z"
    generateName: postgres-backup-1614038400-
    labels:
      controller-uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
      job-name: postgres-backup-1614038400
    name: postgres-backup-1614038400-tclv9
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614038400
      uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
    resourceVersion: "58853020"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614038400-tclv9
    uid: 983cbc6f-0b55-4a34-9c3d-3549858ea19d
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T15:52:25Z"
    generateName: postgres-backup-1614038400-
    labels:
      controller-uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
      job-name: postgres-backup-1614038400
    name: postgres-backup-1614038400-w9qvl
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614038400
      uid: 7146a0e7-50d9-47ae-8f16-abb9580c93d2
    resourceVersion: "45532653"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614038400-w9qvl
    uid: 932cfaa4-549e-45bc-a9f6-d6aa6ac6cce7
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T15:52:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-04T09:56:05Z"
    generateName: postgres-backup-1614060000-
    labels:
      controller-uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
      job-name: postgres-backup-1614060000
    name: postgres-backup-1614060000-5dwng
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614060000
      uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
    resourceVersion: "58852637"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614060000-5dwng
    uid: edbc802f-a36e-4e34-af20-812980146f06
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'Pod The node had condition: [MemoryPressure]. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-04T09:56:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:03:25Z"
    generateName: postgres-backup-1614060000-
    labels:
      controller-uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
      job-name: postgres-backup-1614060000
    name: postgres-backup-1614060000-dnnl8
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614060000
      uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
    resourceVersion: "58852575"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614060000-dnnl8
    uid: c6dbf1de-3732-4ef2-b0c0-a4a692b080a6
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:03:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-04T09:55:55Z"
    generateName: postgres-backup-1614060000-
    labels:
      controller-uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
      job-name: postgres-backup-1614060000
    name: postgres-backup-1614060000-rlvhg
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614060000
      uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
    resourceVersion: "58852596"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614060000-rlvhg
    uid: 176fb744-1697-432b-af04-34e23afebb91
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'Pod The node had condition: [MemoryPressure]. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-04T09:55:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:18:01Z"
    generateName: postgres-backup-1614060000-
    labels:
      controller-uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
      job-name: postgres-backup-1614060000
    name: postgres-backup-1614060000-sg7s8
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614060000
      uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
    resourceVersion: "68116549"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614060000-sg7s8
    uid: 1fbfeb7b-8179-4c43-b192-2a5cd65ff0cc
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:14Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:14Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T18:19:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-04T10:13:42Z"
    generateName: postgres-backup-1614060000-
    labels:
      controller-uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
      job-name: postgres-backup-1614060000
    name: postgres-backup-1614060000-wjshn
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614060000
      uid: 44116efb-e844-4bfd-b3c0-1c03c0187adb
    resourceVersion: "68116163"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614060000-wjshn
    uid: c23b3acf-789c-497a-b83d-90260966e266
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-04T10:13:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:29Z"
    generateName: postgres-backup-1614081600-
    labels:
      controller-uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
      job-name: postgres-backup-1614081600
    name: postgres-backup-1614081600-5qgf2
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614081600
      uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
    resourceVersion: "67108998"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614081600-5qgf2
    uid: 4aedfdc8-d510-449b-8ac8-5bf3a5bf3a0e
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-03-06T12:09:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T12:00:00Z"
    generateName: postgres-backup-1614081600-
    labels:
      controller-uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
      job-name: postgres-backup-1614081600
    name: postgres-backup-1614081600-72rd4
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614081600
      uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
    resourceVersion: "45482575"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614081600-72rd4
    uid: e4a7ff22-c2f4-4ed5-ae3f-9be18f8bbaf6
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:11:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T19:16:54Z"
    generateName: postgres-backup-1614081600-
    labels:
      controller-uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
      job-name: postgres-backup-1614081600
    name: postgres-backup-1614081600-kpmqg
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614081600
      uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
    resourceVersion: "68128513"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614081600-kpmqg
    uid: c8458605-2fd7-41dd-ba9e-6366bb869e1e
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:16:54Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:16:54Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:16:54Z"
      message: 'containers with unready status: [postgres-backup]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T19:16:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: postgres:11.8-alpine
      imageID: ""
      lastState: {}
      name: postgres-backup
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 10.240.0.4
    phase: Pending
    qosClass: BestEffort
    startTime: "2021-05-02T19:16:54Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-30T10:13:41Z"
    generateName: postgres-backup-1614081600-
    labels:
      controller-uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
      job-name: postgres-backup-1614081600
    name: postgres-backup-1614081600-mflbh
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614081600
      uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
    resourceVersion: "68128465"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614081600-mflbh
    uid: 212a304a-9477-4164-ada8-21f1fe082998
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-04-30T10:13:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T15:36:19Z"
    generateName: postgres-backup-1614081600-
    labels:
      controller-uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
      job-name: postgres-backup-1614081600
    name: postgres-backup-1614081600-zrjfj
    namespace: dataworks
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: postgres-backup-1614081600
      uid: 924f85c1-1c0d-4bf5-8ea6-cdfce23a5619
    resourceVersion: "45532562"
    selfLink: /api/v1/namespaces/dataworks/pods/postgres-backup-1614081600-zrjfj
    uid: 0fcea5c2-5b0e-4cf4-b5c5-054913d893d1
  spec:
    containers:
    - args:
      - -c
      - echo "$PGPASS" > /root/.pgpass && chmod 600 /root/.pgpass && pg_dump -U postgres
        -h postgres dataworks > /var/backups/backup-$(date +"%m-%d-%Y-%H-%M").sql
      command:
      - /bin/sh
      env:
      - name: PGPASS
        valueFrom:
          secretKeyRef:
            key: pgpass
            name: pgpass
      image: postgres:11.8-alpine
      imagePullPolicy: IfNotPresent
      name: postgres-backup
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/backups
        name: postgres-backup
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-backup
      persistentVolumeClaim:
        claimName: postgres-backup
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    message: 'The node was low on resource: memory. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T15:36:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:14Z"
    generateName: prometheus-c7bc49c6c-
    labels:
      app: pulsar
      component: prometheus
      pod-template-hash: c7bc49c6c
    name: prometheus-c7bc49c6c-m9pts
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-c7bc49c6c
      uid: 5c16c9fe-b16b-46cd-8aa7-f1e3a7b4f464
    resourceVersion: "45537748"
    selfLink: /api/v1/namespaces/dataworks/pods/prometheus-c7bc49c6c-m9pts
    uid: 84d22138-f830-436b-9f72-bc594b7adc38
  spec:
    containers:
    - image: prom/prometheus:v1.6.3
      imagePullPolicy: IfNotPresent
      name: prometheus
      ports:
      - containerPort: 9090
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/prometheus
        name: config-volume
      - mountPath: /prometheus
        name: data-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-service-account-token-9tfs4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: prometheus-service-account
    serviceAccountName: prometheus-service-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: prometheus-config1
      name: config-volume
    - name: data-volume
      persistentVolumeClaim:
        claimName: prometheus-data-volume
    - name: prometheus-service-account-token-9tfs4
      secret:
        defaultMode: 420
        secretName: prometheus-service-account-token-9tfs4
  status:
    message: 'The node was low on resource: memory. Container prometheus was using
      95500Ki, which exceeds its request of 0. '
    phase: Failed
    reason: Evicted
    startTime: "2021-02-23T13:26:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:13Z"
    generateName: redis-654cc84b7-
    labels:
      app: redis
      pod-template-hash: 654cc84b7
    name: redis-654cc84b7-5z6hm
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: redis-654cc84b7
      uid: 8fa7d3f3-7bad-4566-b331-e3cd72f6b881
    resourceVersion: "64620409"
    selfLink: /api/v1/namespaces/dataworks/pods/redis-654cc84b7-5z6hm
    uid: 48563d7c-50a1-4bda-ae5d-ac59c9b1a57a
  spec:
    containers:
    - image: redis
      imagePullPolicy: IfNotPresent
      name: redis
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:19:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:19:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://46a865b4375ce7e9bbe8758ea3931acefd7e9f60c91617ffb849b0357c9e6908
      image: redis:latest
      imageID: docker-pullable://redis@sha256:26bd5f3d2bbfb21d0e4f03d642570e63c8776d2a9e5963e4057280fb3b4e3e29
      lastState:
        terminated:
          containerID: docker://c9786f7484c9ca740fe49ad9e9d79e41ca930090324b12391a0194ca3f604df7
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-02-23T13:29:43Z"
      name: redis
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:19:57Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.248
    podIPs:
    - ip: 10.240.0.248
    qosClass: BestEffort
    startTime: "2021-02-23T13:26:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:45Z"
    generateName: reminder-service-
    labels:
      app: reminder-service
      controller-revision-hash: reminder-service-55569479cf
      statefulset.kubernetes.io/pod-name: reminder-service-0
      tier: dataworks
    name: reminder-service-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: reminder-service
      uid: d90d987d-781d-4de9-b82f-21c728c609ad
    resourceVersion: "64621192"
    selfLink: /api/v1/namespaces/dataworks/pods/reminder-service-0
    uid: debe854f-d1bd-45e2-a647-de29fb926e4d
  spec:
    containers:
    - env:
      - name: PORT
        value: "1323"
      - name: POSTGRES_USER
        value: postgres
      - name: POSTGRES_PASSWORD
        value: postgres
      - name: POSTGRES_HOST
        value: postgres
      - name: POSTGRES_DB
        value: dataworks
      - name: POSTGRES_PORT
        value: "5432"
      image: dwproductionus.azurecr.io/reminder-service:1.0.1
      imagePullPolicy: Always
      name: reminder-service
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: reminder-service-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: notification-service
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T12:09:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:23:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:23:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T12:09:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://51282a4c8ee7fbd821149f43440243052e120bfcb254a3a53ba195fb8284d117
      image: dwproductionus.azurecr.io/reminder-service:1.0.1
      imageID: docker-pullable://dwproductionus.azurecr.io/reminder-service@sha256:2c24cb14f7e8ee731a4c7054e5a575bae8605bd971db1ba26e8975aa8e5473f6
      lastState:
        terminated:
          containerID: docker://b72a6b2abcf1263bf8b0331028e593bbe95be9402431a0b099407cda3118ae98
          exitCode: 1
          finishedAt: "2021-04-21T20:22:14Z"
          reason: Error
          startedAt: "2021-04-21T20:22:13Z"
      name: reminder-service
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:23:03Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.230
    podIPs:
    - ip: 10.240.0.230
    qosClass: BestEffort
    startTime: "2021-03-06T12:09:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-04T13:01:24Z"
    generateName: scheduler-
    labels:
      app: scheduler
      controller-revision-hash: scheduler-57f5f8b586
      statefulset.kubernetes.io/pod-name: scheduler-0
      tier: dataworks
    name: scheduler-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: scheduler
      uid: e1c5ed46-cd74-43dc-933d-9e54c89234ff
    resourceVersion: "79322264"
    selfLink: /api/v1/namespaces/dataworks/pods/scheduler-0
    uid: 65281e4c-40e9-4437-9a20-e4581a654c4c
  spec:
    containers:
    - env:
      - name: PORT
        value: "3005"
      - name: GRPC_CRUD_SERVICE
        value: configdatamanagementservice
      - name: GRPC_CRUD_PORT
        value: "53001"
      - name: GRPC_JOBFACTORY_SERVICE
        value: jobfactory
      - name: GRPC_JOBFACTORY_PORT
        value: "53334"
      - name: REDIS_HOST
        value: redis
      - name: REDIS_PORT
        value: "80"
      - name: INDEXING_SERVICE
        value: indexingservice
      - name: INDEXING_PORT
        value: "51323"
      image: dwproductionus.azurecr.io/scheduler:1.0.17
      imagePullPolicy: Always
      name: scheduler
      ports:
      - containerPort: 3334
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: scheduler-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: scheduler
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:01:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:01:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:01:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:01:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://11756c87d212065981dc8692756eb5fa4317fc6e7513e8d1b048560de5e9f061
      image: dwproductionus.azurecr.io/scheduler:1.0.17
      imageID: docker-pullable://dwproductionus.azurecr.io/scheduler@sha256:a27f9825a2b5ca7a0f3b1c0bce57c1199d7bb262fa49a1b8c8d067203516419f
      lastState: {}
      name: scheduler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-04T13:01:27Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.217
    podIPs:
    - ip: 10.240.0.217
    qosClass: BestEffort
    startTime: "2021-06-04T13:01:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:13Z"
    generateName: schedulerservice-69ddcb57c4-
    labels:
      app: schedulerservice
      pod-template-hash: 69ddcb57c4
      tier: dataworks
    name: schedulerservice-69ddcb57c4-dctd6
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: schedulerservice-69ddcb57c4
      uid: 0e16e604-db8f-492c-82fd-bd4292f47db3
    resourceVersion: "64620201"
    selfLink: /api/v1/namespaces/dataworks/pods/schedulerservice-69ddcb57c4-dctd6
    uid: fc9a591a-5d13-473d-8219-3885992a32a0
  spec:
    containers:
    - image: nginx:latest
      imagePullPolicy: Always
      name: schedulerservice
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:20:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:20:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c9ea25e1444b1c26121f0765b8f874724abad912eaeac373b42e3e33442c3562
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412
      lastState:
        terminated:
          containerID: docker://ee4c2242f4dc8d27af26ed50053f52c9f48aa71e371d740e23c740d2f243b7c7
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-02-23T13:27:21Z"
      name: schedulerservice
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:20:00Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.242
    podIPs:
    - ip: 10.240.0.242
    qosClass: BestEffort
    startTime: "2021-02-23T13:26:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-29T11:15:46Z"
    generateName: script-service-
    labels:
      app: script-service
      controller-revision-hash: script-service-5cc6987dd4
      statefulset.kubernetes.io/pod-name: script-service-0
      tier: dataworks
    name: script-service-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: script-service
      uid: 3d01a037-bad1-40c9-8d31-5d39ddc38047
    resourceVersion: "87851801"
    selfLink: /api/v1/namespaces/dataworks/pods/script-service-0
    uid: 21f52b58-d7f6-4641-be7d-852c57693fd5
  spec:
    containers:
    - env:
      - name: FLASK_PORT
        value: "5000"
      - name: PG_HOST
        value: localhost
      - name: PG_PORT
        value: "5432"
      - name: PG_DB
        value: postgres
      - name: PG_USER
        value: postgres
      - name: PG_PASS
        value: postgres
      - name: FILE_PATH
        value: /data/csv
      - name: CRUD_SERVICE
        value: http://configdatamanagementservice
      image: dwproductionus.azurecr.io/script-service:1.0.22
      imagePullPolicy: Always
      name: script-service
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: script-service-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: script-service
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:15:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://cadda8482177f269edf62109d0f0f49c48446bd53fefcb07712b60860e44c4a2
      image: dwproductionus.azurecr.io/script-service:1.0.22
      imageID: docker-pullable://dwproductionus.azurecr.io/script-service@sha256:4c7e8a203a91af94c112ca555377100d6e68b0a701646ae23fa43f68e83a67fa
      lastState: {}
      name: script-service
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-29T11:15:49Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.199
    podIPs:
    - ip: 10.240.0.199
    qosClass: BestEffort
    startTime: "2021-06-29T11:15:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-04-27T21:34:10Z"
    generateName: slack-service-6cdf667964-
    labels:
      app: slack-service
      pod-template-hash: 6cdf667964
    name: slack-service-6cdf667964-4cr44
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: slack-service-6cdf667964
      uid: cd245459-50fb-47a8-ba6a-3e6cfc4e6ab1
    resourceVersion: "66556432"
    selfLink: /api/v1/namespaces/dataworks/pods/slack-service-6cdf667964-4cr44
    uid: 2f018283-84b5-404d-93fc-f243b86e6760
  spec:
    containers:
    - env:
      - name: PORT
        value: "1323"
      image: dwproductionus.azurecr.io/slack-service:1.0.1
      imagePullPolicy: IfNotPresent
      name: slack-service
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /files
        name: public-files
      - mountPath: /private-files
        name: private-files
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: dwproduction8748cee1-auth
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: public-files
      persistentVolumeClaim:
        claimName: public-files
    - name: private-files
      persistentVolumeClaim:
        claimName: private-files
    - azureFile:
        secretName: dwk8sdatastorage-secret
        shareName: data
      name: data
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-27T21:34:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-27T21:34:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-27T21:34:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-27T21:34:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2eec720380c4610a32e59c2162f14c6d0e2a0b19cd1eb604e57490652f733105
      image: dwproductionus.azurecr.io/slack-service:1.0.1
      imageID: docker-pullable://dwproductionus.azurecr.io/slack-service@sha256:6fc30a9a465215b1a65eebbe920d25ba4dd80d224c6200f5d1188554e63a4323
      lastState: {}
      name: slack-service
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-27T21:34:21Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.220
    podIPs:
    - ip: 10.240.0.220
    qosClass: BestEffort
    startTime: "2021-04-27T21:34:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-29T11:16:11Z"
    generateName: statsservice-594f57fc7-
    labels:
      app: statsservice
      pod-template-hash: 594f57fc7
      tier: dataworks
    name: statsservice-594f57fc7-s5v24
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: statsservice-594f57fc7
      uid: 1d85199f-46d6-4c25-87f4-fbe6af8545b7
    resourceVersion: "87851979"
    selfLink: /api/v1/namespaces/dataworks/pods/statsservice-594f57fc7-s5v24
    uid: e6dabfbf-b8cd-45d3-863b-687f32c098a6
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        value: redis
      - name: REDIS_PORT
        value: "80"
      - name: CRUD_SERVICE
        value: configdatamanagementservice
      - name: CRUD_PORT
        value: "53001"
      image: dwproductionus.azurecr.io/statsservice:v1.0.66
      imagePullPolicy: Always
      name: statsservice
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-29T11:16:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://75359380ca1c3308a92500b97842225fa3cce547849d6908bf44006727348dd4
      image: dwproductionus.azurecr.io/statsservice:v1.0.66
      imageID: docker-pullable://dwproductionus.azurecr.io/statsservice@sha256:72dbeb3de5ea9d0f7f778853aec9e893fbf151e204f571e9bb3d8ba323f4ab53
      lastState: {}
      name: statsservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-29T11:16:13Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.70
    podIPs:
    - ip: 10.240.1.70
    qosClass: BestEffort
    startTime: "2021-06-29T11:16:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-07T14:48:40Z"
    generateName: testingservice-cf7f55c6f-
    labels:
      app: testingservice
      pod-template-hash: cf7f55c6f
      tier: dataworks
    name: testingservice-cf7f55c6f-p9dk2
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: testingservice-cf7f55c6f
      uid: 021cab09-bfa8-45ac-aec3-2c8c58d0b219
    resourceVersion: "80373766"
    selfLink: /api/v1/namespaces/dataworks/pods/testingservice-cf7f55c6f-p9dk2
    uid: 79d3668d-2dba-4ef6-87e4-220431a7f896
  spec:
    containers:
    - env:
      - name: MONGO_HOST
        value: mongodb
      - name: pulsar_url
        value: pulsar
      - name: CAPTCHA_SERVICE
        value: captcha-solver
      - name: CAPTCHA_PORT
        value: "80"
      image: dwproductionus.azurecr.io/merit-ext-test-serv:v1.69
      imagePullPolicy: Always
      name: testingservice
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-07T14:48:40Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-07T14:48:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-07T14:48:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-07T14:48:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://89284fe52f892a2a381e144be3e9ca43179a9d3dd6a0449b11ef853527ec3779
      image: dwproductionus.azurecr.io/merit-ext-test-serv:v1.69
      imageID: docker-pullable://dwproductionus.azurecr.io/merit-ext-test-serv@sha256:1778b7128bd26c46db98c6bd16261b5356165d08979cb6f3a978c6c27c79f10a
      lastState: {}
      name: testingservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-07T14:48:43Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.6
    podIPs:
    - ip: 10.240.1.6
    qosClass: BestEffort
    startTime: "2021-06-07T14:48:40Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-23T13:26:16Z"
    generateName: weaveworks-
    labels:
      app: weaveworks
      controller-revision-hash: weaveworks-7d4977c666
      statefulset.kubernetes.io/pod-name: weaveworks-0
      tier: dataworks
    name: weaveworks-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: weaveworks
      uid: 6cdae458-139d-4758-b452-aa1ec75430e3
    resourceVersion: "64620257"
    selfLink: /api/v1/namespaces/dataworks/pods/weaveworks-0
    uid: 28ce0815-f348-47ea-9c58-51445b542080
  spec:
    containers:
    - args:
      - --mode=app
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.0
      imagePullPolicy: IfNotPresent
      name: weaveworks
      ports:
      - containerPort: 4040
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: weaveworks-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: weaveworks
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:19:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:19:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-23T13:26:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://18487edb814f5abc12746da94ce6989668602f1454038b683e2273571cdf93e0
      image: weaveworks/scope:1.13.0
      imageID: docker-pullable://weaveworks/scope@sha256:bd1e367e2600c7064abdd3707734fb434f1cdde40331d912a45786b0f77bdbb6
      lastState:
        terminated:
          containerID: docker://1eef0bee2c7f110905abc25c36e8abee4b5ce961fb3e0ddaca9d2c2fe9a3e697
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-02-23T13:26:28Z"
      name: weaveworks
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:19:59Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.32
    podIPs:
    - ip: 10.240.1.32
    qosClass: BestEffort
    startTime: "2021-02-23T13:26:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-08-19T05:46:10Z"
    generateName: weaveworks-agent-
    labels:
      app: weaveworks-agent
      controller-revision-hash: 78f76ccb96
      pod-template-generation: "1"
      tier: dataworks
    name: weaveworks-agent-d2z52
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weaveworks-agent
      uid: e23c2b1f-4bc9-4c8b-9a99-85f0204a2436
    resourceVersion: "96199"
    selfLink: /api/v1/namespaces/dataworks/pods/weaveworks-agent-d2z52
    uid: 5ecac5e8-388e-40e4-909d-917c8d53ef57
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - virtual-node-aci-linux
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=host
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - --probe.docker.bridge=docker0
      - --probe.docker=true
      - weaveworks.dataworks.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.0
      imagePullPolicy: IfNotPresent
      name: weaveworks-agent
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/scope/plugins
        name: scope-plugins
      - mountPath: /sys/kernel/debug
        name: sys-kernel-debug
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: virtual-node-aci-linux
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/scope/plugins
        type: ""
      name: scope-plugins
    - hostPath:
        path: /sys/kernel/debug
        type: ""
      name: sys-kernel-debug
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-08-19T05:46:10Z"
      status: "True"
      type: PodScheduled
    message: Pod weaveworks-agent-d2z52 requires volume scope-plugins which is of
      an unsupported type
    phase: Pending
    qosClass: Burstable
    reason: ProviderFailed
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-02T18:18:53Z"
    generateName: weaveworks-agent-
    labels:
      app: weaveworks-agent
      controller-revision-hash: 78f76ccb96
      pod-template-generation: "1"
      tier: dataworks
    name: weaveworks-agent-r22zs
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weaveworks-agent
      uid: e23c2b1f-4bc9-4c8b-9a99-85f0204a2436
    resourceVersion: "68116479"
    selfLink: /api/v1/namespaces/dataworks/pods/weaveworks-agent-r22zs
    uid: b46e7454-0749-443e-9ebf-62e08b5e0433
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-nodepool-91939667-vmss000009
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=host
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - --probe.docker.bridge=docker0
      - --probe.docker=true
      - weaveworks.dataworks.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.0
      imagePullPolicy: IfNotPresent
      name: weaveworks-agent
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/scope/plugins
        name: scope-plugins
      - mountPath: /sys/kernel/debug
        name: sys-kernel-debug
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: aks-nodepool-91939667-vmss000009
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/scope/plugins
        type: ""
      name: scope-plugins
    - hostPath:
        path: /sys/kernel/debug
        type: ""
      name: sys-kernel-debug
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:18:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:19:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-02T18:18:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d9ed55e935e5f58427d70fdbf743eb7b3e79b08f8e04d7ad9a472c2c77dd700f
      image: weaveworks/scope:1.13.0
      imageID: docker-pullable://weaveworks/scope@sha256:bd1e367e2600c7064abdd3707734fb434f1cdde40331d912a45786b0f77bdbb6
      lastState: {}
      name: weaveworks-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-05-02T18:19:02Z"
    hostIP: 10.240.0.4
    phase: Running
    podIP: 10.240.0.4
    podIPs:
    - ip: 10.240.0.4
    qosClass: Burstable
    startTime: "2021-05-02T18:18:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-05-17T20:43:44Z"
    generateName: weaveworks-agent-
    labels:
      app: weaveworks-agent
      controller-revision-hash: 78f76ccb96
      pod-template-generation: "1"
      tier: dataworks
    name: weaveworks-agent-t8l88
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weaveworks-agent
      uid: e23c2b1f-4bc9-4c8b-9a99-85f0204a2436
    resourceVersion: "73275025"
    selfLink: /api/v1/namespaces/dataworks/pods/weaveworks-agent-t8l88
    uid: 6446bcf0-458a-4861-a48a-db23ba01db5f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-nodepool-91939667-vmss000000
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=host
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - --probe.docker.bridge=docker0
      - --probe.docker=true
      - weaveworks.dataworks.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.0
      imagePullPolicy: IfNotPresent
      name: weaveworks-agent
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/scope/plugins
        name: scope-plugins
      - mountPath: /sys/kernel/debug
        name: sys-kernel-debug
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/scope/plugins
        type: ""
      name: scope-plugins
    - hostPath:
        path: /sys/kernel/debug
        type: ""
      name: sys-kernel-debug
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-05-17T20:43:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-05-17T20:43:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-05-17T20:43:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-05-17T20:43:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4affca1ab16d3ca514b13ed69d05762a7cedfc0f0d1ad5b7f8caa4183d8a5192
      image: weaveworks/scope:1.13.0
      imageID: docker-pullable://weaveworks/scope@sha256:bd1e367e2600c7064abdd3707734fb434f1cdde40331d912a45786b0f77bdbb6
      lastState: {}
      name: weaveworks-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-05-17T20:43:45Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.0.159
    podIPs:
    - ip: 10.240.0.159
    qosClass: Burstable
    startTime: "2021-05-17T20:43:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-03-06T12:09:54Z"
    generateName: weaveworks-cluster-agent-
    labels:
      app: weaveworks-cluster-agent
      controller-revision-hash: weaveworks-cluster-agent-7548f9c5bf
      statefulset.kubernetes.io/pod-name: weaveworks-cluster-agent-0
      tier: dataworks
    name: weaveworks-cluster-agent-0
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: weaveworks-cluster-agent
      uid: 5b05171b-cf5f-4679-b27b-2afcae9b2f08
    resourceVersion: "64620505"
    selfLink: /api/v1/namespaces/dataworks/pods/weaveworks-cluster-agent-0
    uid: b242ac08-ad00-40c7-a3cb-ef70f0638d8c
  spec:
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=cluster
      - --probe.http.listen=:4041
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - weaveworks.dataworks.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.0
      imagePullPolicy: IfNotPresent
      name: scope-cluster-agent
      ports:
      - containerPort: 4041
        protocol: TCP
      resources:
        requests:
          cpu: 25m
          memory: 80Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weaveworks-token-grl96
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: weaveworks-cluster-agent-0
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: weaveworks
    serviceAccountName: weaveworks
    subdomain: weaveworks-cluster-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: weaveworks-token-grl96
      secret:
        defaultMode: 420
        secretName: weaveworks-token-grl96
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T12:09:54Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:20:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-21T20:20:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-03-06T12:09:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://eade536ea63bad2bd6f514aaf182e342f46604d1fd1ddf91145ae3a04116eea1
      image: weaveworks/scope:1.13.0
      imageID: docker-pullable://weaveworks/scope@sha256:bd1e367e2600c7064abdd3707734fb434f1cdde40331d912a45786b0f77bdbb6
      lastState:
        terminated:
          containerID: docker://28d16009228a13bee3be3bbc1ef9bf1b8949dafe0ba381fef3fceeea6f766bd6
          exitCode: 255
          finishedAt: "2021-04-21T20:19:31Z"
          reason: Error
          startedAt: "2021-03-06T12:10:49Z"
      name: scope-cluster-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-04-21T20:20:12Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.104
    podIPs:
    - ip: 10.240.1.104
    qosClass: Burstable
    startTime: "2021-03-06T12:09:54Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-06-04T13:14:12Z"
    generateName: ws-service-56cf6fdd8b-
    labels:
      app: ws-service
      pod-template-hash: 56cf6fdd8b
      tier: dataworks
    name: ws-service-56cf6fdd8b-6t849
    namespace: dataworks
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ws-service-56cf6fdd8b
      uid: 63037546-dd53-4374-8604-422921785f69
    resourceVersion: "79325452"
    selfLink: /api/v1/namespaces/dataworks/pods/ws-service-56cf6fdd8b-6t849
    uid: fb123ae3-7d8e-46e4-acb2-bbd69734c861
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        value: redis
      - name: REDIS_PORT
        value: "80"
      - name: CRUD_SERVICE
        value: configdatamanagementservice
      - name: CRUD_PORT
        value: "53001"
      image: dwproductionus.azurecr.io/ws-service:v1.0.14
      imagePullPolicy: Always
      name: ws-service
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-kfhxd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-nodepool-91939667-vmss000000
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-kfhxd
      secret:
        defaultMode: 420
        secretName: default-token-kfhxd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:14:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:14:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:14:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-04T13:14:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://42476756b4ea413c82b52b97092bf233a3d83fd0c419a7da6f7b984e0017152e
      image: dwproductionus.azurecr.io/ws-service:v1.0.14
      imageID: docker-pullable://dwproductionus.azurecr.io/ws-service@sha256:bba76ad94908337a7f2eea368099679856629d0cb46e3beea35131c31fc1222c
      lastState: {}
      name: ws-service
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-04T13:14:15Z"
    hostIP: 10.240.0.159
    phase: Running
    podIP: 10.240.1.38
    podIPs:
    - ip: 10.240.1.38
    qosClass: BestEffort
    startTime: "2021-06-04T13:14:12Z"
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
